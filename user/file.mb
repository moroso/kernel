//sends message to file server
mod string;
mod syslib;
mod shared;
const NAME_MAX: u32 = 400;
const SERVER_ID: u32 = 5;

struct file_message {
    name: u8[NAME_MAX],
    buffer_len: u32,
}

fn create(name: *u8, buffer: *u8, buffer_len: u32) -> i32 {
    if (string::strnlen(name, NAME_MAX + 1) > NAME_MAX) {
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    let status_buffer: u32[5];
    let len = string::strncpy(&(message.name)[0], name, NAME_MAX);
    //assert!(len <= NAME_MAX); 
    let args: shared::ipc_defs::ipc_args;
    args.dest_id = SERVER_ID; 
    args.long_src.addr = buffer;
    // round up
    if (len%4096 != 0) {
        args.long_src.len = ((len/4096) + 1)*4096;
    } else {
        args.long_src.len = len;
    }
    args.short_src.addr = &message as *u8;
    args.short_src.len = sizeof(file_message);
    args.long_dest.len = 0;
    args.short_dest.addr = &status_buffer[0] as *u8;
    args.short_dest.len = sizeof(u32) * 5;

    0
}
