//sends message to file server
use prelude::string::*;
use prelude::syslib::*;
use prelude::shared::*;
use prelude::thrlib::*;
use prelude::rt_abort;
use prelude::shared::ipc_defs::*;
use prelude::utils::asm::*;
use prelude::ipclib::*;
use prelude::shared::consts::PAGE_SIZE;
use prelude::mallot::*;
mod file_system;

const SERVER_ID: u32 = 5;

struct file_message {
    name: u8[file_system::NAME_MAX],
    request_type: u32,
    buffer_len: u32,
    file_offset: u32,
}

// number of pages file buffer can store
static FILE_BUFFER_PAGES: u32 = 3;
// number of bytes in buffer
static FILE_BUFFER_MAX: u32 = 3 * PAGE_SIZE;

/* file system request types */
const FILE_CREATE: u32 = 0;
const FILE_APPEND: u32 = 1;
const FILE_DELETE: u32 = 2;
const FILE_READ: u32 = 3;
const FILE_WRITE: u32 = 4;

static file_server_active: bool = true;
static threads_dormant: u32 = 0; // number of threads needing wakeup
static threads_active: u32 = 0; // number of active threads in server

/*** server code ***/

/* code that each of the servers run, which processes requests.  We assume our
 * clients are trustworthy enough to give us clean messages (but we don't need
 * to trust */
fn run_server(mb_arg: *u8) {

    /*** setup ***/
    let mb = mb_arg as i32;
    assert!(mb >= 0);
    let status: i32 = -1; 

    assert!(ipc_recv_i32(mb as u32, &status, -1, null) >= 0);
    if (status < 0) {
        printf!("err %d\n", get_tid());
        file_server_active = false;
        abscond(-1);
    }
    printf!("thread %d waiting for wakeup\n", get_tid());
    atomic_add(&threads_dormant, -1);
    while (threads_dormant > 0) {
        yield(-1);
    }
    assert!(threads_dormant >= 0);

    printf!("thread %d running server\n", get_tid());
    atomic_add(&threads_active, 1); 

    /*** active server code ***/

    let request_message: file_message;
    let request_size: u32 = sizeof(file_message);
    // used for storing files
    let file_buffer: *u8 = find_pages(FILE_BUFFER_PAGES);
    let file_buffer_len: u32;

    // if there isn't enough OS mem or address space to allocate a buffer, this
    // thread is probably the least of our problems.  Lets just exit
    // TODO there should probably be some sort of protocol in case the server is
    // active but there are no active threads 
    if (file_buffer == null) {
        atomic_add(&threads_active, -1); 
        abscond(-1);
    }

    while(file_server_active) {
        // reset the buffer length to its max
        file_buffer_len = FILE_BUFFER_MAX;

        if (ipc_recv_long(mb as u32, file_buffer, &file_buffer_len, &request_message as *u8,
                    &request_size, -1, null) >= 0) {
            // in theory, a proxy server is sanitizing things, but
            // if message does not look like a request, return an error
            if (request_size != sizeof(file_message)) {
                status = -1;
                ipc_reply(null, 0, &status as *u32, sizeof(i32));

            } else {
                if (request_message.request_type == FILE_CREATE) {
                    let name = &request_message.name[0]; 
                    status = file_system::fs_file_new(&request_message.name[0],
                            file_buffer,
                            file_buffer_len); 
                    remove_pages(file_buffer, file_buffer_len);
                    ipc_reply(null, 0, &status as *u32, sizeof(i32));
                } else if (request_message.request_type == FILE_READ) {
                    status = file_system::fs_read(&request_message, file_buffer);
                    remove_pages(file_buffer, file_buffer_len);
                    if (status < 0) {
                        ipc_reply(null, 0, &status as *u32, sizeof(i32));
                    } else {
                        ipc_reply(null, 0, &request_message as *u32,
                                sizeof(file_message));

                    }

                }

            }


        }     
    }
    printf!("thread %d exiting server\n", get_tid());
    abscond(0);
}

/* file_server_init: creates a file server with specified number of threads.
 * spins up a new process with a mailbox; all threads execute server_run.  if a
 * valid mailbox descriptor desc is specified, new server sends a message to the
 * mailbox with its descriptor.  Returns with error if threads or mailbox fail
 * to init
 *
 * - num_threads: number of threads for new server.  All threads exit and server
 *   sends failure to desc if all threads cannot be created
 * - desc: a descriptor for the mailbox to which the server sends its status.
 *   Must be a valid descriptor for the invoking thread.
 *   On error, it sends an error code.  Otherwise, it forwards a descriptor to
 *   the mailbox and sends the descriptor in a short message, meaning the
 *   server is ready to take requests
 *
 * Returns error if repl fails, 0 otherwise.  
 *
 * NOTE catching further errors requires sending a descriptor and waiting on
 * that mailbox for a status.
 * NOTE if a valid descriptor desc is given but no thread ever waits on desc,
 * server can fail to properly init and be blocked forever (if async send fails)
 */
fn file_server_init(num_threads: u32, desc: i32) -> i32 {
    file_server_active = false;
    let status: i32 = 0;
    /* for sending a status to a descriptor */
    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = desc as u32;
    args.long_src.len = 0;
    args.short_src.len = sizeof(i32);
    args.short_src.addr = &status as *u8;
    args.timeout = -1;
    args.options = OPTION_ASYNC;

    /* creating file server proc (ensures file server has its own descriptors
     * and address space) */
    let ret = repl();
    if (ret < 0) {
        return -1;
    }
    if (ret == 0) {
        /* file server creates own mailbox */
        let mb: i32 = -1;
        if ((mb = mailbox_new()) < 0) {
            if (desc >= 0) {
                // on error send, error code to descriptor 
                status = -1;
                ipc_send(&args);
            }
            abscond(-1);
        }
        let i: u32;
        // spin up the specified number of threads; quit early if thread
        // creation fails
        for (i = 0; i < num_threads; i+=1) {
            printf!("creating thread %d\n", i);
            if ((ret = thr_create(run_server, mb as *u8)) < 0) {
                // TODO task_vanish or cond var
                status = -2;
                num_threads = i;
                break; 
            } 
        }

        assert!(mb >= 0);
        args.dest_id = mb as u32;
        args.options = OPTION_NO_REPLY;

        if (status >= 0) {
            atomic_add(&threads_dormant, num_threads);
            // we set this before the server is truly active, but it's ok,
            // because nothing will get sent to the mailbox until we end out the
            // descriptor, which happens after the threads wake up
            file_server_active = true;
        }

        // wake up child threads either with success (run server) or error
        // (abscond immediately)
        // do this before waking the proc waiting on desc in case they attempt to wait on our
        // mailbox and ruin everything 
        for (i = 0; i < num_threads; i+=1) {
            printf!("waking up thread %d\n", i);
            let ret = ipc_send(&args);
            if (ret < 0) {
                printf!("%d\n", ret);
            }
            assert!(ret >= 0);
        }

        // wake up thread waiting on given mailbox
        if (desc >= 0) {

            // wait until server is fully active
            while(threads_dormant > 0) {
                yield(-1);
            }

            if (status < 0) {

                args.options = OPTION_ASYNC;
                // if async fails due to memory, send a synchronous message instead
                if (ipc_send(&args) == IPC_ERR_INTERNAL) {
                    args.options = OPTION_NO_REPLY;
                    ipc_send(&args); 
                }
            } else {
                if (ipc_forward_mb(desc as u32, mb as u32, null, null,
                            true, -1) < 0) {
                    // TODO handle err
                }
            }
        }
        printf!("exiting\n");
        abscond(status);

        assert!(false); // no return
    }

    0
}


/*** client code ***/

/* send a new file name and some data to start the new file.  returns with error
 * if ipc fails, or if the file already exists */
fn file_create(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: u32, timeout: i32) -> i32 {
    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    message.request_type = FILE_CREATE;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = buffer_len;
    message.file_offset = 0;
    let response: u32;
    let response_size: u32 = sizeof(u32);

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = buffer_len;
    if (buffer_len%PAGE_SIZE != 0) {
        long_message_len = buffer_len + (PAGE_SIZE - buffer_len%PAGE_SIZE);   
    } 
    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &response as *u8, &response_size, timeout, true);

    if (ret < 0 || (response_size < sizeof(u32))) {
        return ret;
    }

    response as i32
}

fn file_read(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: *u32, offset:
        u32, timeout : i32) -> i32 {

    if (buffer_len == null) {
        return -2;
    }
    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    let message_size = sizeof(file_message);
    message.request_type = FILE_READ;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = *buffer_len;
    message.file_offset = offset;

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = *buffer_len;
    if (*buffer_len%PAGE_SIZE != 0) {
        long_message_len = *buffer_len + (PAGE_SIZE - *buffer_len%PAGE_SIZE);   
    } 
    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &message as *u8, 
            &message_size, timeout, true);

    if (message_size == sizeof(i32)) {
        return *(&message as *i32);
    } 

    *buffer_len = message.buffer_len;

    ret
}
