/* file.mb client and server interfaces for the file server.  The file server is
 * multithreaded and services requests to add, read from and edit entries in the
 * userland file system.
 *
 * clients communicate to servers over ipc.  when data is read from or written
 * to a file, it must be in a page-aligned buffer.  This buffer is temporarily
 * mapped into the server's address space for transfer, then unmapped before
 * wakeup
 *
 * All requests made to the server are synchronous, but can specify timeouts.
 *
 * TODO server threads should probably be elastic (respond to frequency of
 * requests)
 *
 * Bug: nasty security vuln/general correctness issue.  clients timeout when reads/writes are being
 * performed on shared buffer, they have no way of knowing when server is done
 * reading/writing to them.
 *
 * Author Amanda M. Watson
 * */

use prelude::string::*;
use prelude::syslib::*;
use prelude::shared::*;
use prelude::thrlib::*;
use prelude::rt_abort;
use prelude::shared::ipc_defs::*;
use prelude::utils::asm::*;
use prelude::ipclib::*;
use prelude::shared::consts::PAGE_SIZE;
use prelude::mallot::*;
use prelude::server::*;
use prelude::name::*;
use prelude::utils::stdlib::*;
mod file_system;

// used id used to find server program and register with name server
const FILE_SERVER_ID: *u8 = "file_server";

/* file system request types */
const FILE_CREATE: u32 = 0; // create new file
const FILE_APPEND: u32 = 1; // append to end of file
const FILE_DELETE: u32 = 2; // delete file 
const FILE_READ: u32 = 3; // read from file
const FILE_WRITE: u32 = 4; // write to file

/* DON'T BE A JERK, COMPILER */
static file_server_active: bool = true; 
static threads_dormant: u32 = 0; // number of threads needing wakeup
static threads_active: u32 = 0; // number of active threads in server

/* sent to the server alongside buffer to provide information about the file and
 * request */
struct file_message {
    // file name
    name: u8[file_system::NAME_MAX],
    // create, read, write, etc
    request_type: u32,
    // length of data in buffer (may differ from length of buffer sent)
    buffer_len: u32,
    // offset into the current file at which the buffer should be located 
    // (for reads and writes)
    file_offset: u32,
}

// number of pages each server thread allocates to store file data 
static FILE_BUFFER_PAGES: u32 = 3;
// number of bytes in buffer
static FILE_BUFFER_MAX: u32 = 3 * PAGE_SIZE;

/*** server code ***/

/* run_server: called as the starting function for server threads: check whether
 * server received errors during init, block until all other server threads have
 * woken up and begin to service requests.  all threads wait on the same
 * mailbox 
 *
 * client's file buffers are temporarily mapped into a fixed-sized server 
 * buffer, which is allocated during setup.  
 *
 * thread does not return from run_server; it will abscond if it receives an
 * init error, it is unable to allocate its buffer, or the server at some point
 * becomes inactive (NOTE this feature is not yet implemented).
 *
 * - mb_arg: the descriptor for the server mailbox, cast to a *u8.
 *
 * Does not return
 *
 * Note that the setup stage requires blocking on a global variable.  This is
 * both dangerous and unprofessional, and should probably be swapped out with
 * something like a cond-var or (or, more correctly, a task-vanish) when
 * possible.
 * */
fn run_server(mb_arg: *u8) {

    /*** setup ***/
    let mb = mb_arg as i32;
    assert!(mb >= 0);
    
    if (server_thread_init(mb as u32) < 0) {
        server_thread_exit(&file_server_active, -1); 
    } 

    /* reads in client request */
    let status: i32 = -1;
    let request_message: file_message;
    let request_size: u32 = sizeof(file_message);

    /* reads in file buffer */
    let file_buffer: *u8 = find_pages(FILE_BUFFER_PAGES);
    let file_buffer_len: u32;

    // if there isn't enough OS mem or address space to allocate a buffer, this
    // thread is probably the least of our problems.  Lets just exit
    // TODO there should probably be some sort of protocol in case the server is
    // active but there are no active threads 
    if (file_buffer == null) {
        server_thread_exit(&file_server_active, 0); 
    }

    /*** active server code ***/
    while(file_server_active) {
        // reset the buffer lengths to their maxes
        file_buffer_len = FILE_BUFFER_MAX;
        request_size = sizeof(file_message);
        if (ipc_recv_long(mb as u32, file_buffer, &file_buffer_len, &request_message as *u8,
                    &request_size, -1, null) >= 0) {
            // in theory, a proxy server is sanitizing things, but
            // if message does not look like a request, return an error
            if (request_size != sizeof(file_message)) {
                status = -20;
                ipc_reply(null, 0, &status as *u32, sizeof(i32));

            } else {
                if (request_message.request_type == FILE_CREATE) {
                    let name = &request_message.name[0]; 
                    status = file_system::fs_file_new(&request_message.name[0],
                            file_buffer,
                            request_message.buffer_len); 
                    remove_pages(file_buffer, file_buffer_len);

                    ipc_reply(null, 0, &status as *u32, sizeof(i32));
                } else if (request_message.request_type == FILE_READ) {
                    status = file_system::fs_read(&request_message, file_buffer);
                    remove_pages(file_buffer, file_buffer_len);
                    if (status < 0) {
                        ipc_reply(null, 0, &status as *u32, sizeof(i32));
                    } else {
                        ipc_reply(null, 0, &request_message as *u32,
                                sizeof(file_message));

                    }

                } else if (request_message.request_type == FILE_WRITE) {
                    status = file_system::fs_write(&request_message.name[0],
                            file_buffer, request_message.buffer_len,
                            request_message.file_offset);
                    remove_pages(file_buffer, file_buffer_len);
                    ipc_reply(null, 0, &status as *u32, sizeof(i32));

                } else if (request_message.request_type == FILE_APPEND) {
                    status = file_system::fs_append(&request_message.name[0],
                            file_buffer, request_message.buffer_len);
                    remove_pages(file_buffer, file_buffer_len);
                    ipc_reply(null, 0, &status as *u32, sizeof(i32));

                }
            }

        }     
    }

    printf!("thread %d exiting server\n", get_tid());
    server_thread_exit(&file_server_active, 0); 
}

/* file_server_init: creates a file server with specified number of threads.
 * spins up a new process with a mailbox; original thread performs init on
 * server and threads before exiting.  All other threads execute run_server.  if a
 * valid mailbox descriptor desc is specified, new server sends a message to the
 * mailbox with its descriptor.  Returns with error if threads or mailbox fail
 * to init
 *
 * - num_threads: number of threads for new server.  All threads exit and server
 *   sends failure to desc if all threads cannot be created.  Note that 
 * - desc: a descriptor for the mailbox to which the server sends its status.
 *   Must be a valid descriptor for the invoking thread.
 *   On error, it sends an error code.  Otherwise, it forwards a descriptor to
 *   the mailbox and sends the descriptor in a short message, meaning the
 *   server is ready to take requests
 *
 * Returns error if repl fails, 0 otherwise.  
 *
 * NOTE if a valid descriptor desc is given but no thread ever waits on desc,
 * server can fail to properly init and be blocked forever (if async send fails)
 */
fn file_server_init(num_threads: u32, desc: i32) -> i32 {
    server_init(FILE_SERVER_ID, &file_server_active, num_threads, run_server,
            desc)
}


/*** client code ***/

/* file_create: create a new file in the file system.  If a buffer is included,
 * the contents of the buffer comprise the body of the new file.
 *
 * - fs_desc: the mailbox descriptor for the invoking process.  Returns with
 *   failure if the descriptor is invalid
 * - name: the name of the new file.  Returns with error if name includes
 *   invalid characters, exceeds the maximum name length, or there already exists
 *   a file with the same name.
 * - buffer: contents of the new file.  Returns with error if buffer is not
 *   page_aligned.  Ignored if buffer length 
 *   is zero
 * - buffer_len: length of content in buffer (can be smaller than the size of
 *   the buffer itself).  Note that this value will be rounded up to the nearest
 *   page, and this page will be temporarily shared with the server.  Returns with
 *   error if rounded-up length exceeds maximum buffer size for a server thread. 
 * - timeout: number of cycles to wait for a server reply before timing out.  a
 *   value of -1 denotes an infinite wait.    
 *
 *   Returns 0 if file was successfully created and file contents added, a
 *   negative value on error.
 * */
fn file_create(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: u32, timeout: i32) -> i32 {

    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        return -1;
    }

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = round_up(buffer_len, PAGE_SIZE);

    if (long_message_len > FILE_BUFFER_MAX) {
        return -2;
    }

    // TODO sanitize name input
    let message: file_message;
    message.request_type = FILE_CREATE;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = buffer_len;
    message.file_offset = 0;
    let response: u32;
    let response_size: u32 = sizeof(u32);

    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &response as *u8, &response_size, timeout, true);

    if (ret < 0 || (response_size < sizeof(u32))) {
        return ret;
    }

    response as i32
}

/* file_read: reads from specified file into buffer
 *
 * - fs_desc: mailbox descriptor for file server.  Returns with error if
 *   descriptor is invalid for invoking thread
 * - name: name of file being read from.  Returns with error if name exceeds
 *   NAME_MAX, contains invalid characters, or refers to a file that does not
 *   exist in the file system
 * - buffer: buffer to which server writes file's content. Returns error if buffer 
 *   is not page-aligned 
 * - buffer_len: length of buffer contents being read from file (does not have
 *   to correspond to length. Rounded up to page, which
 *   is shared with server. Returns error if
 *   rounded up length exceeds server buffer length
 * - offset: byte offset into the existing file at which read should begin.
 *   Returns with error if offset exceeds exiting file length.
 * - timeout: number of cycles to wait for server to reply. 
 *   NOTE that, if timeout occurs between the time the server receives the request 
 *   and finishes it, the server will still copy the memory at the buffer location, 
 *   even if it changes on the client side. This could be a correctness problem
 *   if, say, the client times out, and then tries to use the buffer that is
 *   still being shared/written to  
 *
 *   returns 0 if write if successful, negative error code on failure
 *
 * */
fn file_read(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: *u32, offset:
        u32, timeout : i32) -> i32 {

    if (buffer_len == null) {
        return -2;
    }
    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        printf!("HERE 1\n");
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    let message_size = sizeof(file_message);
    message.request_type = FILE_READ;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = *buffer_len;
    message.file_offset = offset;

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = round_up(*buffer_len, PAGE_SIZE);
    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &message as *u8, 
            &message_size, timeout, true);

    if (message_size == sizeof(i32)) {
        return *(&message as *i32);
    } 

    *buffer_len = message.buffer_len;

    ret
}

/* file_write: write buffer to specified file at the given offset into the
 * existing file.  
 *
 * - fs_dest: mailbox descriptor for file server.  Returns with error if
 *   descriptor is invalid for invoking thread
 * - name: name of file being written to.  Returns with error if name exceeds
 *   NAME_MAX, contains invalid characters, or refers to a file that does not
 *   exist in the file system 
 * - buffer: contains content being written to file. Returns error if buffer 
 *   is not page-aligned 
 * - buffer_len: length of buffer contents being written to file (does not have
 *   to correspond to length. Rounded up to page, which
 *   is shared with server. Returns error if
 *   rounded up length exceeds server buffer length
 * - offset: byte offset into the existing file at which write should begin.
 *   Returns with error if offset exceeds exiting file length.
 * - timeout: number of cycles to wait for server to reply. 
 *   NOTE that, if timeout occurs between the time the server receives the request 
 *   and finishes it, the server will still copy the memory at the buffer location, 
 *   even if it changes on the client side.  This could present a vulnerability
 *   if, say, the client writes sensitive information to the buffer before the
 *   copy to the filesystem, and a malicious process then reads from the
 *   file.
 *
 *   returns 0 if write if successful, negative error code on failure
 * */
fn file_write(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: u32, offset:
        u32, timeout: i32) -> i32 {


    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    message.request_type = FILE_WRITE;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = buffer_len;
    message.file_offset = offset;

    let response: u32;
    let response_size = sizeof(u32);

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = round_up(buffer_len, PAGE_SIZE);   
    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &response as *u8, 
            &response_size, timeout, true);

    if (ret >= 0) {
        return response as i32
    }

    ret
}


fn file_append(fs_desc: u32, name: *u8, buffer: *u8, buffer_len: u32, timeout: i32) -> i32 {


    if (strnlen(name, file_system::NAME_MAX + 1) > file_system::NAME_MAX) {
        return -1;
    }
    // TODO sanitize name input
    let message: file_message;
    message.request_type = FILE_APPEND;
    let len = strncpy(&(message.name)[0], name, file_system::NAME_MAX);
    assert!(len <= file_system::NAME_MAX); 
    message.buffer_len = buffer_len;
    message.file_offset = 0;

    let response: u32;
    let response_size = sizeof(u32);

    /* round up long message so it's a multiple of a page.  we only copy in
     * buffer_len bytes */
    let long_message_len = round_up(buffer_len, PAGE_SIZE);   
    let ret = ipc_send_long(fs_desc, buffer, long_message_len, &message as *u8,
            sizeof(file_message), null, null, &response as *u8, 
            &response_size, timeout, true);

    if (ret >= 0) {
        return response as i32
    }

    ret
}
