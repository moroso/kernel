/* console_test.mb: basic test of console server.  Allocates a buffer and
 * makes a request to use the buffer with the console.
 * makes a request to use the buffer with the console.
*/

use syslib::{abscond, mailbox_new, mailbox_remove, new_pages, yield};
use server::new_server;
use console::{CONSOLE_SERVER_ID, request_buffer};
use shared::consts::{VID_REGION_SIZE, PAGE_SIZE};

static BUFFER: *u8 = 0xdead0000 as *u8;

const NUM_CONSOLE_THREADS: u32 = 16;

fn putpixel(buf: *u8, x: u32, y: u32, r: u8, g: u8, b: u8) {
    buf[(y*640+x)*3 + 0] = b;
    buf[(y*640+x)*3 + 1] = g;
    buf[(y*640+x)*3 + 2] = r;
}

fn draw_stuff(buf: *u8, color: u32) {
    let i: u32 = 0;
    let j: u32 = 0;
    let space_x: u32 = 0;
    let space_y: u32 = 0;
    let space: u32 = 4;

    let screen_width = 640;
    let screen_height = 480;
    for (i = 0; i < 0x100; i += 1) {
        for (j = 0; j < 0x100; j += 1) {
            for (space_x = 0; space_x < space; space_x +=1) {
                for (space_y = 0; space_y < space; space_y+=1) {
                    if ((i*space + space_x) >= screen_width || (j*space +
                                space_y) >=
                            screen_height) {
                        continue;
                    }
                    putpixel(buf, i*space + space_x, j*space + space_y, (i +
                                color) as u8, j as u8, ((i + color) ^ j) as u8);
                }
            }

        }
    }

    for (i = 0; i < (screen_width/4); i += 1) {
        for (j = 0; j < 70; j += 1) {
            if (j <= 8 || j >= 60) {
                let r = (i/2) as u8;
                let g = (i/2) as u8;
                let b = (i) as u8;
                putpixel(buf, (2*i), j, r, g,  b);
                putpixel(buf, (2*i+1), j, r, g, b);

                putpixel(buf, (screen_width - 0x100) +  255 - (2*i), j, r, g,  b);
                putpixel(buf, (screen_width - 0x100) +  255 - (2*i+1), j, r, g,
                        b);


                putpixel(buf, (2*i), 410 + j, r, g, b);
                putpixel(buf, (2*i+1), 410 + j, r, g, b);

                putpixel(buf, (screen_width - 0x100) +  255 - (2*i), 410 + j, r,
                        g, b);
                putpixel(buf, (screen_width - 0x100) +  255 - (2*i+1), 410 + j,
                        r, g, b);


                continue;
            }

            if (j%8 < 4 || i%8 < 3) {
                continue;
            }
            putpixel(buf, (2*i), j, i as u8, (i/4) as u8,  (i/2) as u8);
            putpixel(buf, (2*i+1), j, i as u8, (i/4) as u8, (i/2) as u8);

            putpixel(buf, (screen_width - 0x100) +  255 - (2*i), j, i as
                    u8, (i/4) as u8,  (i/2) as u8);
            putpixel(buf, (screen_width - 0x100) +  255 - (2*i+1), j, i as
                    u8, (i/4) as u8, (i/2) as u8);



            putpixel(buf, (2*i), 410 + j, i as u8, (i/4) as u8,  (i/2) as u8);
            putpixel(buf, (2*i+1), 410 + j, i as u8, (i/4) as u8, (i/2) as u8);

            putpixel(buf, (screen_width - 0x100) +  255 - (2*i), 410 + j, i as
                    u8, (i/4) as u8,  (i/2) as u8);
            putpixel(buf, (screen_width - 0x100) +  255 - (2*i+1), 410 + j, i as
                    u8, (i/4) as u8, (i/2) as u8);


        }
    }

}

fn main() -> i32 {
    printf!("Console test starting\n");

    /*** initialize console server; blocks until server is set up ***/
    let new_mb = mailbox_new();
    if (new_mb < 0) {
        printf!("ERROR: initializing new mailbox\n");
        abscond(-1);
    }
    let console_mb: i32;
    if ((console_mb = new_server(CONSOLE_SERVER_ID, NUM_CONSOLE_THREADS, new_mb)) < 0) {
        printf!("ERROR: initializing console server\n");
        abscond(-1);
    }
    mailbox_remove(new_mb as u32);

    // perform buffer operations

    /*** request to use new buffer with console ***/
    if (request_buffer(console_mb as u32, BUFFER, -1) < 0) {
        printf!("ERROR: console\n");
        abscond(-1);
    }

    yield(-1);

    printf!("Drawing to buffer %x\n", BUFFER);
    draw_stuff(BUFFER, 0);

    printf!("***SUCCESS***\n");
    abscond(0);
    0
}
