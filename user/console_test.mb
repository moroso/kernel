/* console_test.mb: basic test of console server.  Allocates a buffer and
 * makes a request to use the buffer with the console. 
*/

use syslib::{abscond, mailbox_new, mailbox_remove, new_vid_buffer, set_vid_buffer};
use server::new_server;
use console::{CONSOLE_SERVER_ID, use_console};

static BUFFER: *u8 = 0xdeadb000 as *u8;
static BUFFER2: *u8 = 0xdeadc000 as *u8;

const NUM_CONSOLE_THREADS: u32 = 16;

fn strlen(buf: *u8) -> u32 {
    let len: u32 = 0;
    while (buf[len] != 0) {
        len += 1;
    }

    len
}

fn draw_string(buf: *u8, str: *u8) {
    let i: u32 = 0;
    let len: u32 = strlen(str);

    for (i = 0; i < len; i += 1) {
        buf[2*i + 1] = 0xf;
        buf[2*i] = str[i];
    }
}

fn main() -> i32 {

    /*** initialize console server; blocks until server is set up ***/
    let new_mb = mailbox_new();
    if (new_mb < 0) {
        printf!("ERROR: initializing new mailbox\n");
        abscond(-1);
    }
    let console_mb: i32;
    if ((console_mb = new_server(CONSOLE_SERVER_ID, NUM_CONSOLE_THREADS, new_mb)) < 0) {
        printf!("ERROR: initializing console server\n");
        abscond(-1);
    }
    mailbox_remove(new_mb as u32);

    /* TODO buffer allocation syscall; will look something 
     * like get_buffer(addr: *u8, size: u32) -> i32 
     * maps a buffer at addr and associates it with a buffer id */
    let buffer_id = 4; 

    // perform buffer operations

    /*** request to use new buffer with console ***/
    if (use_console(console_mb as u32, BUFFER, -1) < 0) {
        printf!("ERROR: console\n");
        abscond(-1);
    }

    /*** request to use new buffer with console ***/
    if (use_console(console_mb as u32, BUFFER2, -1) < 0) {
        printf!("ERROR: console\n");
        abscond(-1);
    }

    draw_string(BUFFER, "Hello");
    draw_string(BUFFER2, "      World!");

    while (true) {
        set_vid_buffer(BUFFER2);
        set_vid_buffer(BUFFER);
    }

    printf!("***SUCCESS***\n");
    abscond(0);
    0
}
