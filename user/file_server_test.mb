use syslib::*;
use shared::ipc_defs::*;
use mallot::*;
use file::*;
use ipclib::*;
use string::*;
use name::*;

static NUM_THREADS: u32 = 200;

fn main() -> i32 {

    let string_list = ["One Step Forward\n", "Two Steps Back\n", "Spin Once\n",
        "Spin Twice\n", "Jump Around\n", "Twist!\n"];
    let list_len = 6;

    mallot_init();
    let mb = mailbox_new();
    let fs_mb: i32;
    if ((fs_mb = file_server_init(5, mb)) < 0) {
        printf!("error\n");
        abscond(-1);
    } 
    printf!("mb %d fs_mb %d\n", mb, fs_mb);
    mailbox_remove(mb as u32);

    let i: u32;
    let ret: i32;
    for (i = 0; i < NUM_THREADS; i+=1) {
        if ((ret = repl()) == 0) {
            break;
        } 
        if (ret < 0) {
            printf!("error\n");
            abscond(-1);
        }
    }

    // let's just test and see that it works
    let file = find_pages(1);
    let file_pointer = file;
    for (i = 0; i < 3; i+=1) {
        let ind = (i + get_tid())%list_len;
        let string_len = strnlen(string_list[ind], 100);
        strncpy(file_pointer, string_list[ind], string_len);
        file_pointer+=string_len;
    }
    let file_name = "dance #x";

    let file_name_length = strnlen(file_name, 100);
    file_name[7] = file[get_tid()] as u8;

    if ((ret = file_create(fs_mb as u32, file_name, file, strnlen(file, 1000),
                    -1)) >=
            0) {

        printf!("NAME: %s CONTENT: %s\n", file_name, file);
    } else {
        if (ret == -1) {
            printf!("conflict %s\n", file_name);
        } else {
            printf!("ERROR %d\n", ret);
            abscond(-1);
        }
    }

    while (true) {
        mailbox_remove(fs_mb as u32);

        fs_mb = -1;
        if (server_request(NAME_SERVER, "file server", &fs_mb, -1) < 0) {
            printf!("ERROR 1\n");
            abscond(-1);
        }

        remove_pages(file, 4096);
        let response = find_pages(1);
        let resp_len = 1000;

        if ((ret = file_read(fs_mb as u32, file_name, response, &resp_len, 0,
                        -1)) < 0) {
            printf!("ERROR 2 (%d)\n", ret);
            abscond(-1);
        }   
        printf!("read file %s.  Content: %s\n", file_name, response);

        if ((ret = file_write(fs_mb as u32, file_name, response,
                        strnlen(response, 1000), get_tid(),
                        -1)) < 0) {
            printf!("ERROR 3 (%d)\n", ret);
            abscond(-1);
        }   

        remove_pages(response, 4096);
    }
    printf!("DONE\n"); 
    abscond(1);
    0
}
