use syslib::*;
use shared::ipc_defs::*;
use mallot::*;
use file::*;
use ipclib::*;

/* checks the exit status of its children; if a child has exited with error,
 * exits with error as well */
fn child_check() {
    let status: i32 = 0;
    let ret: i32;
    while ((ret = syslib::bide(&status)) >= 0) {
        printf!("RET %d\n", ret);
        if status < 0 {
            printf!("***ERROR***");
            syslib::abscond(-1);
        }
    }

    if (status < 0) {
        printf!("***ERROR***");
        syslib::abscond(-1);
    }
}


fn main() -> i32 {
    let mb = mailbox_new();
    printf!("MB %d\n", mb);
    assert!(mb >= 0);
    printf!("file server init exited with status %d\n", file_server_init(5, mb));
    let fs_mb: i32 = -1;
    ipc_recv_all(mb as u32, null, null, null, null, &fs_mb, -1, null);
    printf!("mailbox: %d\n", fs_mb);

    let i: u32 = 0;
    let response: file_message;
    let response_size = sizeof(file_message);

    for (i = 0; i < 1000; i+=1) {
        ipc_send_short(fs_mb as u32, &i as *u8, sizeof(u32), &response as *u8,
                &response_size, false, -1);
        printf!("received %d of length %d\n", *(&response as *u32), response_size);
    }
    syslib::abscond(1);
    0
}
