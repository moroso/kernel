/* ipc_manywait_test.mb 
 * creates NUM_ITERS child processes to wait on parent mailbox.  parent waits
 * until all child processes are spun up, and then calls recv to collect them.
 * replies with both long and short messages, send with short message 
 * Author: Amanda M. Watson
 */

mod shared;
mod syslib;
const NUM_ITERS: u32 = 100;
const NUM_THREADS: u32 = 50;
const MAGIC_NUMBER: u32 = 72; // chosen for no reason

/* checks the exit status of its children; if a child has exited with error,
 * exits with error as well */
fn child_check() {
    let status: i32 = 0;
    while (syslib::bide(&status) > 0) {
        if status < 0 {
            printf!("***ERRROR***\n");
            syslib::abscond(-1);
        }
    }
    if (status < 0) {
        printf!("***ERRROR***\n");
        syslib::abscond(-1);
    }
}

fn main() -> i32 {
    let j: u32;
    let ret: i32;
    for (j = 0; j < NUM_THREADS; j+=1) {
        ret = syslib::repl();
        if (ret == 0) {
            ret = syslib::repl();
            if (ret != 0) {
                child_check(); 
                syslib::abscond(0);
            }
            syslib::mailbox_new();
            let mb_desc = syslib::mailbox_new();
            assert!(mb_desc > 0);
            let src_addr: *u8 = 0xdeadb000 as *u8;
            let dest_addr: *u8 = 0xdeaaa000 as *u8;
            let len_long = 4096;
            let short_message: u32 = -1;
            let args: syslib::shared::ipc_defs::ipc_args;
            args.dest_id = mb_desc as u32;
            args.long_src.len = 0;
            args.long_dest.addr = dest_addr;
            args.long_dest.len = len_long;
            args.short_src.len = 4;
            args.short_dest.len = 4;
            args.short_dest.addr = &short_message as *u8;
            args.short_src.addr = &short_message as *u8; 
            args.timeout = -1;
            args.options = 0;
            let i: u32;
            for (i = 0; i < NUM_ITERS; i+=1) {
                ret = syslib::repl();
                if (ret == 0) {
                    printf!("child %d sending message %d\n", syslib::get_tid(),
                            i);
                    short_message = i;
                    printf!("%d send returned %d\n", syslib::get_tid(), syslib::ipc_send(&args));
                    if (args.long_dest.len > 0) {
                        assert!(*(dest_addr as *u32) == i); 
                    }
                    assert!(short_message == MAGIC_NUMBER);
                    syslib::abscond(1);
                } 
            }
            
            // note that children are not guaranteed to be
            //blocked by the time this expires, but we're fast ipc, so we make an educated
            // guess
            // TODO replace with yield thing?
            args.timeout = 20; 
            i = 0;
            while (syslib::ipc_recv(&args) >= 0) {
                printf!("thread %d receiving\n", syslib::get_tid());
                if (syslib::new_pages(src_addr, len_long, 1024) < 0) {
                    printf!("err in new_pages\n");
                    syslib::abscond(-1);
                }

                *(src_addr as *u32) = short_message;
                assert!(syslib::ipc_recv(&args) < 0);
                let message: u32 = MAGIC_NUMBER;
                assert!(syslib::ipc_reply(src_addr, len_long, &message, 4) >= 0);
                i+=1;
            }
            assert!(i == NUM_ITERS);
            child_check();
            syslib::abscond(0);
        }
    }
    child_check(); 
    printf!("***SUCCESS***\n");
    syslib::abscond(0);

    0
}
