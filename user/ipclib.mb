/* Some wrappers for ipc 
 *
 */

use prelude::syslib::*;
use prelude::shared::ipc_defs::*;

/* TODO again with the not being able to make things const -- what is up with that? */
static IPC_NO_ID: u32 = -1 as u32;
static IPC_NO_LEN: u32 = 0;
static IPC_NO_ADDR: *u8 = null;
static IPC_NO_DESC: i32 = -1; 
static IPC_NO_TIMEOUT: u32 = -1 as u32;
static IPC_OPTION_DEFAULT: u32 = 0;

// sets all args to default values 
// message fields sent with default values will not have information read from
// or written to them
fn ipc_args_init(args: *ipc_args) {
    args->dest_id = IPC_NO_ID;
    args->long_src.len = IPC_NO_LEN;
    args->long_src.addr = IPC_NO_ADDR;
    args->long_dest.len = IPC_NO_LEN;
    args->long_dest.addr = IPC_NO_ADDR;
    args->short_src.len = IPC_NO_LEN;
    args->short_src.addr = IPC_NO_ADDR;
    args->short_dest.len = IPC_NO_LEN;
    args->short_dest.addr = IPC_NO_ADDR;
    args->desc_src = IPC_NO_DESC;
    args->desc_dest = IPC_NO_DESC;
    args->timeout = IPC_NO_TIMEOUT;
    args->options = IPC_OPTION_DEFAULT;
}


fn ipc_send_long(mb: u32, long_src: *u8, long_src_len: u32, short_src: *u8,
        short_src_len: u32, long_dest: *u8, long_dest_len: *u32, short_dest:
        *u8, short_dest_len: *u32, timeout: i32, shared: bool) -> i32 {

    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = mb;
    args.long_src.addr = long_src;
    args.long_src.len = long_src_len;
    args.short_src.addr = short_src;
    args.short_src.len = short_src_len;
    args.options = OPTION_NO_REPLY;

    if (long_dest_len != null) {
        args.long_dest.addr = long_dest;
        args.long_dest.len = *long_dest_len;
        if (*long_dest_len != 0) {
            args.options = IPC_OPTION_DEFAULT;
        }
    }
    if (short_dest_len != null) {
        args.short_dest.addr = short_dest;
        args.short_dest.len = *short_dest_len;
        if (*short_dest_len != 0) {
            args.options = IPC_OPTION_DEFAULT;
        }

    }

    args.timeout = timeout as u32;
    
    if (shared) {
        args.options|=OPTION_SHARE;
    }
    let ret = ipc_send(&args);
    
    if (ret >= 0) {
        if (long_dest_len != null) {
            *long_dest_len = args.long_dest.len;
        }
        if (short_dest_len != null) {
            *short_dest_len = args.short_dest.len;
        }
    }
    ret
}

fn ipc_send_short(mb: u32, src_addr: *u8, src_len: u32, dest_addr: *u8, dest_len: *u32,
        async: bool, timeout: i32) -> i32 {

    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = mb;
    args.short_src.addr = src_addr;
    args.short_src.len = src_len;
    args.timeout = timeout as u32;
    if (async) {
        args.options = OPTION_ASYNC;
    } else if (dest_len == null || *dest_len == 0) {
        /* if no dest is specified, there's no reason to expect a reply */
        args.options = OPTION_NO_REPLY;
    } else {
        args.short_dest.addr = dest_addr;
        if (dest_addr != null) {
            args.short_dest.len = *dest_len;
        }
    }
    let ret = ipc_send(&args);
    if (ret >= 0) {
        // updated in args by ipc
        if (dest_len != null) {
            *dest_len = args.short_dest.len;
        }
    }

    ret
}

fn ipc_request_mb(mb: u32, src_addr: *u8, src_len: u32, dest_addr: *u8,
        dest_len: *u32, desc: *i32, async: bool, timeout: i32) -> i32 {

    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = mb;
    args.short_src.addr = src_addr;
    args.short_src.len = src_len;
    args.timeout = timeout as u32;
    if (async) {
        args.options = OPTION_ASYNC;
    } else if (dest_len == null || *dest_len == 0) {
        /* if no dest is specified, there's no reason to expect a reply */
        args.options = OPTION_NO_REPLY;
    } else {
        args.short_dest.addr = dest_addr;
        if (dest_addr != null) {
            args.short_dest.len = *dest_len;
        }
    }
    let ret = ipc_send(&args);
    if (ret >= 0) {
        // updated in args by ipc
        if (dest_len != null) {
            *dest_len = args.short_dest.len;
        }
    }
    if (desc != null && args.desc_dest >= 0) {
        *desc = args.desc_dest;
    }

    ret
}

fn ipc_send_i32(mb: u32, src_i32: *i32, dest_addr: *u8, dest_len: *u32, async:
        bool, timeout: i32) -> i32 {
    ipc_send_short(mb, src_i32 as *u8, sizeof(i32), dest_addr, dest_len, async,
            timeout)
}

fn ipc_forward_mb(mb: u32, desc: u32, src_addr: *u8, src_len: u32, dest_addr: *u8, dest_len: *u32, async: bool,
        timeout: i32) -> i32 {
    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = mb;
    args.desc_src = desc as i32;
    args.short_dest.addr = dest_addr;
    args.short_src.addr = src_addr;
    args.short_src.len = src_len;

    if (dest_len != null) {
        args.short_dest.len = *dest_len;
    }
    if (async) {
        args.options = OPTION_ASYNC;
    } else if (dest_len == null || *dest_len == 0) {
        args.options = OPTION_NO_REPLY;
    }
    args.timeout = timeout as u32;
    let ret = ipc_send(&args);
    if (ret >= 0) {
        if (dest_len != null) {
            *dest_len = args.short_dest.len;
        }
    }
    ret
}

fn ipc_recv_mb(mb: u32, desc: *i32, dest_addr: *u8, dest_len: *u32, timeout: i32, reply_needed: *bool) -> i32 {
    ipc_recv_all(mb, null, null, dest_addr, dest_len, desc, timeout, reply_needed)
}

fn ipc_recv_i32(mb: u32, dest_i32: *i32, timeout: i32, reply_needed: *bool) -> i32 {
    let resp_max: u32 = sizeof(u32);
    ipc_recv_all(mb, null, null, dest_i32 as *u8, &resp_max, null, timeout,
            reply_needed)
}

fn ipc_recv_long(mb: u32, long_addr: *u8, long_len: *u32, short_addr: *u8, short_len: *u32, 
        timeout: i32, reply_needed: *bool) -> i32 {
    ipc_recv_all(mb, long_addr, long_len, short_addr, short_len, null, -1,
            reply_needed)
}

fn ipc_recv_all(mb: u32, long_addr: *u8, long_len: *u32, short_addr: *u8, short_len: *u32,
        desc: *i32, timeout: i32, reply_needed: *bool) -> i32 {
    let args: ipc_args;
    ipc_args_init(&args);
    args.dest_id = mb;
    args.long_dest.addr = long_addr;
    if (long_len != null) {
        args.long_dest.len = *long_len;
    }
    args.short_dest.addr = short_addr;
    if (short_len != null) {
        args.short_dest.len = *short_len;
    }
    args.timeout = timeout as u32;	
    let ret = ipc_recv(&args);
    if (ret >= 0) {
        if (short_len != null) {
            *short_len = args.short_dest.len;
        }
        if (long_len != null) {
            *long_len = args.long_dest.len;
        }
        if (desc != null) {
            *desc = args.desc_dest;
        }
        if (reply_needed != null) {
            if (args.options&OPTION_ASYNC == 0 &&
                    args.options&OPTION_NO_REPLY == 0) {

                *reply_needed = false;
            } else {
                *reply_needed = true;
            }
        }
    }

    ret
}

fn ipc_reply(long_addr: *u8, long_len: u32, short_addr: *u32, short_len: u32) ->
i32 {
    ipc_reply_full(long_addr, long_len, short_addr, short_len, -1)
}

fn ipc_reply_mb(short_addr: *u32, short_len: u32, desc: u32) -> i32 {
    ipc_reply_full(null, 0, short_addr, short_len, desc as i32)
}
