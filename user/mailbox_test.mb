/* mailbox_test.mb: tests basic mailbox operations  
 *
 * Author Amanda M. Watson
*/

use ipclib::*;
use string::*;
use syslib::*;
use shared::ipc_defs::*;
use thrlib::*;

// number of mailboxes that currently fit in desc table 
const MB_LIMIT: u32 = 63;
const MB_ERR_INTERNAL: i32 = -8;
const DESC_ERR_FULL: i32 = -1;
const MB_REMOVE: u32 = MB_LIMIT - 3;
const MB_WAIT: u32 = MB_LIMIT - 2;
const DESC_ERR_EMPTY: i32 = -4;
const DESC_ERR_ARGS: i32 = -3;

fn child_prog(args: *u8) {
    let i: u32;
    let ret: i32;
    let message: *u8 = "to no one";
    for (i = 1; i < MB_LIMIT; i+=1) {
        printf!(" %d ", i);
        if ((ret = ipc_send_short(i, message, strnlen(message, 100) + 1, null, null, false,
                        5)) != IPC_ERR_TIMEOUT) {
            printf!("ERROR: %d\n", ret);
            abscond(-1);
        } 
    }
    printf!("SUCCESS\n");
    /* testing whether mailboxes are invalid after removal */
    printf!("testing mailbox removal: ");
    ret = repl();
    if (ret < 0) {
        printf!("TEST ERROR: could not repl\n");
        abscond(-1);
    }
    if (ret == 0) {
        if ((ret = ipc_send_i32(MB_WAIT, null, null, null, false, -1)) < 0) {
            printf!("TEST ERROR: IPC %d\n", ret);
            abscond(-1); 
        }
        if ((ret = ipc_send_short(MB_REMOVE, message, strnlen(message, 100) + 1, null, null, false,
                        5)) != IPC_ERR_TIMEOUT) {
            printf!("ERROR: %d\n", ret);
            abscond(-1);
        } 
        abscond(0);
    }
    mailbox_remove(MB_REMOVE);
    if ((ret = ipc_recv_i32(MB_REMOVE, null, -1, null)) != IPC_ERR_DEST) {
        printf!("ERROR sending to deleted mb: %d\n", ret);
        abscond(-1); 
    }

    if ((ret = ipc_recv_i32(MB_WAIT, null, -1, null)) < 0) {
        printf!("TEST ERROR: IPC %d\n", ret);
        abscond(-1); 

    }
    let status: i32 = 0;
    if (bide(&status) < 0) {
        printf!("TEST ERROR: bide\n");
        abscond(-1);
    }
    if (status < 0) {
        printf!("FAILURE\n");
        abscond(-1);
    }
    printf!("SUCCESS\n");
    
    /* testing replacement of deleted mailbox */
    printf!("Testing successful mailbox replacement: ");
    if ((ret = mailbox_new()) == MB_ERR_INTERNAL) {
        printf!("TEST ERROR: not enough internal memory.  Exiting\n");
        abscond(-1);
    } else if (ret != MB_REMOVE as i32) {
        printf!("ERROR in mailbox creation: %d\n", ret);
        abscond(-1);
    }
    printf!("SUCCESS\n");
    printf!("testing mailbox movement: ");
    
    if ((ret = mailbox_move(MB_WAIT, MB_LIMIT+1)) != DESC_ERR_ARGS) {
        printf!("ERROR 1: args in mb_move: %d\n", ret);
        abscond(-1);
    }

    if (mailbox_move(MB_LIMIT+1, MB_REMOVE) != DESC_ERR_ARGS) {
        printf!("ERROR 2: args in mb_move\n");
        abscond(-1);
    }

    ret = repl(); 
    if (ret < 0) {
        printf!("TEST ERROR: could not repl\n");
        abscond(-1);
    }
    if (ret == 0) {
        if ((ret = ipc_send_i32(MB_WAIT, null, null, null, false, -1)) < 0) {
            printf!("TEST ERROR: IPC %d\n", ret);
            abscond(-1); 
        }
        if ((ret = ipc_send_short(MB_REMOVE, message, strnlen(message, 100) + 1, null, null, false,
                        5)) != IPC_ERR_TIMEOUT) {
            printf!("ERROR: %d\n", ret);
            abscond(-1);
        } 
        abscond(0);
    } else {
        if (mailbox_move(MB_WAIT, MB_REMOVE) < 0) {
            printf!("ERROR moving mailboxes\n");
            abscond(-1);
        } 
        if ((ret = ipc_recv_i32(MB_REMOVE, null, -1, null)) != 0) {
            printf!("ERROR sending to valid dest of moved mb: %d\n", ret);
            abscond(-1); 
        }

        if ((ret = ipc_recv_i32(MB_WAIT, null, -1, null)) != IPC_ERR_DEST) {
            printf!("ERROR sending to invalid src of moved mb: %d\n", ret);
            abscond(-1); 
        }

        let status: i32 = 0;
        if (bide(&status) < 0) {
            printf!("TEST ERROR: bide\n");
            abscond(-1);
        }
        if (status < 0) {
            printf!("FAILURE\n");
            abscond(-1);
        }
    }

    if (mailbox_move(MB_WAIT, MB_REMOVE) != DESC_ERR_EMPTY) {
        printf!("ERROR 3: args in mb_move\n");
        abscond(-1);
    }

    printf!("SUCCESS\n");
    /* testing if waiting thread can still return with its descriptor removed */


    printf!("***SUCCESS***\n");
    abscond(0);
}

fn main() -> i32 {

    let ret: i32;
    let i: u32 = 0;

    /* testing behavior for when descriptor table runs out of space */
    printf!("testing overflow: ");
    for (i = 0; i < MB_LIMIT; i+=1) {
        if ((ret = mailbox_new()) == MB_ERR_INTERNAL) {
            printf!("TEST ERROR: not enough internal memory.  Exiting\n");
            abscond(-1);
        } else if (ret < 0) {
            printf!("ERROR in mailbox creation: %d\n", ret);
            abscond(-1);
        }

    }
    // this mailbox should exceed our limits 
    if ((ret = mailbox_new()) != DESC_ERR_FULL) {
        printf!("ERROR: improper response to full table: %d\n", ret);
        abscond(-1);
    } 
    printf!("SUCCESS!\n");

    /* testing whether parent descriptors remain valid for the child */
    printf!("testing mailbox propogation -- child: ");
    ret = repl();
    if (ret < 0) {
        printf!("TEST ERROR: unable to replicate\n");
        abscond(-1);
    }
    if (ret != 0) {
        let status: i32;
        assert!(bide(&status) >= 0);
        if (status < 0) {
            printf!("FAILED: %d\n", status);
            abscond(-1);
        }       
    } else {
        let message: *u8 = "to no one";
        for (i = 1; i < MB_LIMIT; i+=1) {
            printf!(" %d ", i);
            if ((ret = ipc_send_short(i, message, strnlen(message, 100) + 1, null, null, false,
                            5)) != IPC_ERR_TIMEOUT) {
                printf!("ERROR: %d\n", ret);
                abscond(-1);
            } 
        }
        abscond(0);
    }
    /* testing whether mailbox descriptors are valid for other threads in the
     * process */
    printf!("testing propogation: new thread: ");
    if (thr_create(child_prog, null) < 0) {
        printf!("TEST ERROR: unable to create thread\n");
        abscond(-1);
    }
    abscond(0);
    assert!(false);
    0
}
