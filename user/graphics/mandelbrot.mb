// Run as something like: ./mandelbrot | pnmtopng > mandelbrot.png

use out::{setup_output,write_output};
use maths::fixed;
use maths::fixed::num;

mod maths;
mod arch;
mod out;

fn mag2(r: num, i: num) -> num {
    fixed::mult(r, r) + fixed::mult(i, i)
}

// There are fairly simple formulas for figuring out whether a point
// is in the main cardioid or the period 2 bulb, so to avoid needing
// to iterate up to the limit in those fairly large sets of points, we
// explictly check if we are in them.
fn in_main_cardioid(r: num, i: num) -> bool {
    // I copied this from some old code I had. Presumbably I got the
    // formulas from the internet somewhere.
    let rshift = r - fixed_dec2!(0,25);
    let i2 = fixed::mult(i, i);
    // q = (r - 0.25)^2 + i^2
    let q = fixed::mult(rshift, rshift) + i2;
    // In cardioid if: q * (q + (r - 0.25)) < 0.25*i^2
    fixed::mult(q, q + rshift) < i2/4
}
fn in_period_2_bulb(r: num, i: num) -> bool {
    let rshift = r + fixed_int!(1);
    // In bulb if: (r + 1)^2 + i^2 < 1/16
    fixed::mult(rshift, rshift) + fixed::mult(i,i) < fixed_frac!(1, 16)
}

fn mandelbrot_calc(r0: num, i0: num) -> i32 {
    let k: i32;

    let r = r0;
    let i = i0;

    // Skip the iteration if we know it is in a region that can't
    // escape.
    if in_main_cardioid(r, i) || in_period_2_bulb(r, i) { return 0; }

    for (k = 0; k < 40; k += 1) {
        if mag2(r, i) >= fixed_int!(4) { return k; }

        let tmp_i = 2*fixed::mult(r, i) + i0;
        r = fixed::mult(r, r) - fixed::mult(i, i) + r0;
        i = tmp_i;
    }

    0
}

// Color - our framebuffers want it in BGR form
struct color {
    b: u8,
    g: u8,
    r: u8,
}
macro mcolor!(r, g, b) { color { r: $r, g: $g, b: $b, } }

// Make up some colors. This is based on reverse engineering a formula
// from the list of colors I have in another mandelbrot program I
// wrote once. I'm not really sure where *that* came from.
fn pick_color(i: i32) -> color {
    let c = color {
        r: ((i / 36) * 36) as u8,
        g: (((i % 32) / 4) * 36) as u8,
        b: ((i % 4) * 85) as u8,
    };
    c
}

const R_MIN: num = fixed_dec3!(-2,005);
const R_MAX: num = fixed_dec3!( 1,070);



fn fill_mandelbrot_buffer(buf: *color, width: u32, height: u32) {
    let r_min = R_MIN;
    let r_range = R_MAX - r_min;
    let step = r_range / width as i32;

    let i_range = step * height as i32;
    let i_min = -i_range / 2;

    let x: u32; let y: u32;
    let i: num = i_min;
    for (y = 0; y < height; y += 1) {
        let r: num = r_min;
        for (x = 0; x < width; x += 1) {
            let color = mandelbrot_calc(r, i);
            buf[y*width + x] = pick_color(color);

            r += step;
        }
        i += step;
    }
}

//////
const WIDTH: u32 = 800;
const HEIGHT: u32 = 600;
static buf: color[WIDTH*HEIGHT];

fn main() -> i32 {
    setup_output(&buf[0], WIDTH, HEIGHT);
    fill_mandelbrot_buffer(&buf[0], WIDTH, HEIGHT);
    write_output(&buf[0], WIDTH, HEIGHT);

    0
}
