/* ipc_async_test2.mb 
 * thread creates a child, waits until child has exited.  child sends NUM_ITERS
 * async messages before it absconds.   
 * Author: Amanda M. Watson
*/

mod shared;
mod syslib;
const NUM_ITERS: u32 = 100;
const NUM_THREADS: u32 = 100;

/* checks the exit status of its children; if a child has exited with error,
 * exits with error as well */
fn child_check() {
    let status: i32 = 0;
    while (syslib::bide(&status) > 0) {
        if status < 0 {
            printf!("***ERRROR***\n");
            syslib::abscond(-1);
        }
    }
    if (status < 0) {
        printf!("***ERRROR***\n");
        syslib::abscond(-1);
    }
}



fn main() -> i32 {
    
    let j: u32;
    let ret: i32;
    for (j = 0; j < NUM_THREADS; j+=1) {
        ret = syslib::repl();
        if (ret == 0) {
            ret = syslib::repl();
            if (ret != 0) {
                child_check(); 
                syslib::abscond(0);
            }
            let mb_desc = syslib::mailbox_new();
            assert!(mb_desc == 0);

            let short_message: u32 = -1;
            let args: syslib::shared::ipc_defs::ipc_args;
            args.dest_id = mb_desc as u32;
            args.long_src.len = 0;
            args.long_dest.len = 0;
            args.short_src.len = 4;
            args.short_dest.len = 4;
            args.short_dest.addr = &short_message as *u8;
            args.short_src.addr = &short_message as *u8; 
            args.timeout = -1;
            args.options = 0;
            let i: u32;
            ret = syslib::repl();
            if (ret == 0) {
                for (i = 0; i < NUM_ITERS; i+=1) {
                    args.options = syslib::shared::ipc_defs::OPTION_ASYNC; 
                    short_message = i;
                    printf!("thread %d sending message %d\n", syslib::get_tid(),
                            i);
                    printf!("%d send returned %d\n", syslib::get_tid(), syslib::ipc_send(&args));
                } 

                syslib::abscond(1);
            }

            let status: i32;
            while(syslib::bide(&status) >= 0) {
                if status < 0 {
                    syslib::abscond(-1);
                }
            }
            if (status < 0) {
                syslib::abscond(-1);
            }

            /* now that we've ensured our child has exited, collect its messages */
            i = 0;
            args.timeout = 0; // we're polling, essentially
            while ((ret = syslib::ipc_recv(&args)) >= 0) {
                assert!(short_message == i);
                i+=1;
            }
            assert!(i == NUM_ITERS);
            syslib::abscond(0);
        }
    }
    child_check();
    printf!("***SUCCESS***\n");
    syslib::abscond(0);

    0
}
