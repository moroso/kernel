/* bad_test.mb: tests error handling in the case of an uncooperative server by
 * sending requests to the bad server.  Attempts to receive a long and short
 * message into a buffer from the bad server.  Test is successful if "***SUCCESS***" is
 * printed at the end.
 *
 * Author Amanda M. Watson
*/

use syslib::{abscond, mailbox_new, mailbox_remove, remove_pages};
use server::new_server;
use bad::{BAD_SERVER_ID, bad_server_request};
use mallot::{find_pages};
use shared::consts::PAGE_SIZE;

// timeout for request.  should be non-negative
const TIMEOUT: i32 = 60;
// number of times requests get sent to server
const NUM_ITERS: u32 = 100;

fn main() -> i32 {
    let ret: i32;
    let mb = mailbox_new();
    if (mb < 0) {
        printf!("TEST ERROR: constructing new mailbox\n");
        abscond(-1);
    }
  
    // setting up bad server
    let bad_mb = new_server(BAD_SERVER_ID, 100, mb); 

    mailbox_remove(mb as u32);
    printf!("received bad mb\n");
    if (bad_mb < 0) {
        printf!("ERR initializing bad server\n");
        abscond(-1);
    }


    let long_buffer = find_pages(1);
    if (long_buffer == null) {
        printf!("TEST ERROR: cannot allocate buffer\n");
        abscond(-1);
    }
    let short_buffer = 4;

    let i: u32;
    for (i = 0; i < NUM_ITERS; i+=1) {
        let long_buffer_size = PAGE_SIZE;
        let short_buffer_size = sizeof(u32);
        let desc = -1;
        if ((ret = bad_server_request(bad_mb as u32, long_buffer, &long_buffer_size,
                        &short_buffer, &short_buffer_size, &desc, TIMEOUT)) < 0) {
            printf!("ERROR: bad server request %d\n", ret);
            abscond(-1);
        }
    }

    printf!("***SUCCESS***\n");
  
    remove_pages(long_buffer, PAGE_SIZE);
    abscond(0);
    0
}
