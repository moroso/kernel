/* server.mb: A library for quickly setting up multithreaded servers.  Moroso servers don't
 * have to use these declarations, but it provides a decent skeleton for the
 * common case.  A process that wishes to create a new server calls new_server(),
 * specifying the server id.  This ID can be used to register the new server
 * with the name server, and also corresponds to a program in the
 * kernel's filesystem, which runs as the server.
 *
 * Servers are run as a child of the invoking process; the invoking thread is given
 * the option of blocking until server setup completes.
 *
 * TODO The Moroso userland is in desperate need of some synchronization primitives.
 * Cond vars could probably be set up with a better thread library and some
 * careful use of IPC.  For now, some threads block on global variables, and we
 * hope the CPU/compiler doesn't mess this up for us.
 *
 * All server threads belong to the same process and, by default, have one
 * mailbox.  Mailboxes, however, can be added by client threads in the
 * developer-defined client function (run_server, specified in server_init)
 *
 * Author Amanda M. Watson
 */

use prelude::string::*;
use prelude::syslib::*;
use prelude::shared::*;
use prelude::thrlib::*;
use prelude::rt_abort;
use prelude::shared::ipc_defs::*;
use prelude::ipclib::*;
use prelude::shared::consts::PAGE_SIZE;
use prelude::mallot::*;
use prelude::name::*;
//TODO(porting): the outside interface to atomic_add really should be elsewhere,
// and some other library should wrap "arch". Most user code should never have
// to touch the "arch" module.
use prelude::arch::atomic_add;

// maximum len for arg to perform
// TODO steal max arg len from kernel
const PERFORM_MAX_LEN: u32 = 100;

// when set to true, prints updates as server progresses
static server_verbose: bool = false;

// we spin on the values of these two variables, and hope the CPU/compiler
// doesn't re-order instructions
static threads_dormant: u32 = 0; // number of threads needing wakeup
static threads_active: u32 = 0; // number of active threads in server

/* exit code for server threads.  Should be called by threads exiting in the
 * run_server function specified by server_init.  Exits invoking thread.
 * - server_active denotes whether server is currently active
 * - err: the error code the worker exits with
 */
fn server_thread_exit(server_active: *bool, err: i32) {
    atomic_add(&threads_active, -1);
    if (err < 0) {
        *server_active = false;
    }
    abscond(err);
}

/* inits worker threads in the run_server function specified by server_init
 * - mb: server descriptor.  waits on mailbox until woken up with an error
 *   status by server_init.
 *
 * returns a positive value n if the server thread is ready to work, which
 * denotes the value of threads_active before the atomic add.  a negative error code if there
 * was an error in setup
 **/
fn server_thread_init(mb: u32) -> i32 {

    let status: i32 = -1;
    assert!(ipc_recv_i32(mb as u32, &status, -1, null) >= 0);
    if (status < 0) {
        if (server_verbose) {
            printf!("err %d (%d)\n", get_tid(), status);
        }
        return -1;
    }

    atomic_add(&threads_dormant, -1);
    while (threads_dormant > 0) {
        yield(-1);
    }
    assert!(threads_dormant >= 0);

    atomic_add(&threads_active, 1)
}

/* creates a new server by replicating a new process and running its server init
 * program.
 *
 * - prog_name name of server/program that runs it.  the new process will run a
 *   program prog_name.mb, so this program must exist in the kernel file
 *   system.  Must be fewer than PERFORM_MAX_LEN chars
 * - num_threads number of worker threads for the server.  returns with error if
 *   num_threads threads fail to be initialized.
 * - desc: if non-negative, the invoking thread will wait on desc until signaled
 *   by the new server with either success or failure.  No timeouts are
 *   specified
 *
 * Returns success if server program is successfully up and running, negative
 * error code otherwise
 */
fn new_server(prog_name: *u8, num_threads: u32, desc: i32) -> i32 {

    // pay no mind -- I am just real bad at arrays in this language
    // (arrays in this language are also sort of bad)
    let desc_buffer_temp: (*u8)[3];
    let desc_buffer: **u8 = &desc_buffer_temp[0];
    desc_buffer[2] = null;

    let desc_word: u8[PERFORM_MAX_LEN];
    let threads_word: u8[PERFORM_MAX_LEN];

    desc_buffer[0] = &desc_word[0];
    desc_buffer[1] = &threads_word[0];
    snprintf!(&desc_word[0], PERFORM_MAX_LEN, "%d", desc);
    snprintf!(&threads_word[0], PERFORM_MAX_LEN, "%d", num_threads);


    let ret = repl();
    if (ret < 0) {
        return -1;
    }
    if (ret != 0) {
        let new_mb: i32;
        if (ipc_recv_mb(desc as u32, &new_mb, null, null, -1, null) < 0) {
            return -2;
        }
        return new_mb;
    }
    if (server_verbose) {
        printf!("calling perform on %s\n", prog_name);
    }
    perform(prog_name, desc_buffer);
    -1
}

/* Called from server program to initialize server.  creates server mailbox,
 * spins up to num_threads worker threads, blocks until they are all active,
 * (if specified) registers mailbox with name server and wakes up thread waiting on desc.
 * If an error is encountered during setup, sends error code to worker threads and desc.
 *
 * - name name of server.  this is the name that gets registered with the name
 *   server.
 * - server_active denotes whether server threads are properly set up and open
 *   to accepting requests.  Set to true or false depending on whether setup is
 *   successful
 * - num_threads number of worker threads in server.  Returns with error if
 *   sufficient threads are unable to be created.
 * - run_server function run by server threads to process client requests
 * - desc the descriptor for the mailbox on which the thread that created the
 *   server is blocked.  if desc is non-negative, sends server initialization
 *   results to thread waiting on desc.  Timeout is specified in case the
 *   invoking thread failed to wait.
 * - ns_register denotes whether new server should be registered with the name
 *   server.
 * - Timeout specifies how many cycles to wait on a signal to desc.  a timeout
 *   of -1 denotes an infinite wait.
 *
 * Does not return on success.
 *
 */
fn server_init(name: *u8, server_active: *bool, num_threads: u32, run_server: fn(*u8)->(),
        desc: i32, ns_register: bool, timeout: i32) -> i32 {

    let ret: i32;
    let status: i32 = 0;

    /* file server creates own mailbox */
    let mb: i32 = -1;

    if (server_verbose) {
        printf!("\tcreating mailbox: ");
    }

    if ((mb = mailbox_new()) < 0) {
        if (desc >= 0) {
            // on error send, error code to descriptor
            status = -1;
            ipc_send_short(desc as u32, &status as *u8, sizeof(u32), null,
                    null, false, timeout);
        }
        abscond(-1);
    }
    if (server_verbose) {
        printf!("SUCCESS!\n");
    }
    let i: u32;
    // spin up the specified number of threads; quit early if thread
    // creation fails
    if (server_verbose) {
        printf!("\tspinning up %d worker threads:", num_threads);
    }
    for (i = 0; i < num_threads; i+=1) {
        if ((ret = thr_create(run_server, mb as *u8)) < 0) {
            // TODO task_vanish or cond var
            status = -2;
            num_threads = i;
            break;
        }
    }
    if (server_verbose) {
        printf!("SUCCESS!\n");
    }
    assert!(mb >= 0);

    if (status >= 0) {
        atomic_add(&threads_dormant, num_threads);
        // we set this before the server is truly active, but it's ok,
        // because nothing will get sent to the mailbox until we end out the
        // descriptor, which happens after the threads wake up
        *server_active = true;
    }

    if (ns_register) {
        if (server_verbose) {
            printf!("\tregisterring mb in name server: ");
        }
        if (name_server_register(name, mb as u32, -1) < 0)  {
            if (server_verbose) {
                printf!("ERR registerring file server\n");
            }
            status = -6;
        }
        if (server_verbose) {
            printf!("\tSUCCESS!\n");
        }
    }

    // wake up child threads either with success (run server) or error
    // (abscond immediately)
    // do this before waking the proc waiting on desc in case they attempt to wait on our
    // mailbox and ruin everything
    if (server_verbose) {
        printf!("\tsetup complete!  waking up worker threads: ");
    }
    for (i = 0; i < num_threads; i+=1) {
        let ret = ipc_send_i32(mb as u32, &status, null, null, false, -1);
        if (ret < 0) {
            printf!("%d\n", ret);
        }
        assert!(ret >= 0);
    }
    if (server_verbose) {
        printf!("SUCCESS!\n");
    }
    // wake up thread waiting on given mailbox
    if (desc >= 0) {

        // wait until server is fully active
        while(threads_dormant > 0) {
            yield(-1);
        }

        if (status < 0) {

            // if async fails due to memory, send a synchronous message instead
            if (ipc_send_i32(mb as u32, &status, null, null, true, -1) == IPC_ERR_INTERNAL) {
                ipc_send_i32(mb as u32, &status, null, null, false, -1);
            }
        } else if (desc >= 0) {
            if (server_verbose) {
                printf!("\tsending descriptor to invoking proc: ");
            }
            // if the sender isn't waiting, we're blocked forever.
            // This is probably better than timing out and leaving
            // the sender potentially blocked
            ipc_forward_mb(desc as u32, mb as u32, null, 0, null, null,
                    false, -1);
            if (server_verbose) {
                printf!("SUCCESS\n");
            }
        }
    }
    mailbox_remove(desc as u32);
    if (server_verbose) {
        printf!("**%s: SETUP COMPLETE\n", name);
    }
    abscond(0);
    0
}
