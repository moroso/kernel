/*  
 *
 * It is assumed that one instance of this code is run per-process
*/

use prelude::string::*;
use prelude::syslib::*;
use prelude::shared::*;
use prelude::thrlib::*;
use prelude::rt_abort;
use prelude::shared::ipc_defs::*;
use prelude::utils::asm::*;
use prelude::ipclib::*;
use prelude::shared::consts::PAGE_SIZE;
use prelude::mallot::*;
use prelude::name::*;

static threads_dormant: u32 = 0; // number of threads needing wakeup
static threads_active: u32 = 0; // number of active threads in server

fn server_thread_exit(server_active: *bool, err: i32) {
    atomic_add(&threads_active, -1); 
    if (err < 0) {
        *server_active = false;
    }
    abscond(err);
}

fn server_thread_init(mb: u32) -> i32 {

    let status: i32 = -1; 
    assert!(ipc_recv_i32(mb as u32, &status, -1, null) >= 0);
    if (status < 0) {
        printf!("err %d (%d)\n", get_tid(), status);
        return -1;
    }

    printf!("thread %d waiting for wakeup\n", get_tid());
    atomic_add(&threads_dormant, -1);
    while (threads_dormant > 0) {
        yield(-1);
    }
    assert!(threads_dormant >= 0);

    printf!("thread %d running server\n", get_tid());
    atomic_add(&threads_active, 1); 
    0
}

fn new_server(prog_name: *u8, desc: i32) -> i32 {
    // TODO choose something meaningful
    let desc_buffer_temp: u8[100];
    let desc_buffer: *u8 = &desc_buffer_temp[0];

    snprintf!(desc_buffer, 100, "%d", desc);
    let ret = repl();
    if (ret < 0) {
        return -1;
    }
    if (ret != 0) {
        let new_mb: i32;
        if (ipc_recv_mb(desc as u32, &new_mb, null, null, -1, null) < 0) {
            return -2;
        }
        return new_mb;
    }
    let B = ["hello", "help", null];
    perform(prog_name, &B[0]);
    -1
}

fn server_init(name: *u8, server_active: *bool, num_threads: u32, run_server: fn(*u8)->(), 
        desc: i32) -> i32 {

    let ret: i32;
    let status: i32 = 0; 

    /* file server creates own mailbox */
    let mb: i32 = -1;
    if ((mb = mailbox_new()) < 0) {
        if (desc >= 0) {
            // on error send, error code to descriptor 
            status = -1;
            ipc_send_short(desc as u32, &status as *u8, sizeof(u32), null,
                    null, false, -1);
        }
        abscond(-1);
    }
    let i: u32;
    // spin up the specified number of threads; quit early if thread
    // creation fails
    for (i = 0; i < num_threads; i+=1) {
        printf!("creating thread %d\n", i);
        if ((ret = thr_create(run_server, mb as *u8)) < 0) {
            // TODO task_vanish or cond var
            status = -2;
            num_threads = i;
            break; 
        } 
    }

    assert!(mb >= 0);

    if (status >= 0) {
        atomic_add(&threads_dormant, num_threads);
        // we set this before the server is truly active, but it's ok,
        // because nothing will get sent to the mailbox until we end out the
        // descriptor, which happens after the threads wake up
        *server_active = true;
    }

    if (name != null && mb >= 0) {
        if (name_server_register(name, mb as u32, -1) < 0)  {
            printf!("ERR registerring file server\n");
            status = -6;
        } 
    }

    // wake up child threads either with success (run server) or error
    // (abscond immediately)
    // do this before waking the proc waiting on desc in case they attempt to wait on our
    // mailbox and ruin everything 
    for (i = 0; i < num_threads; i+=1) {
        printf!("waking up thread %d with status %d\n", i, status);
        let ret = ipc_send_i32(mb as u32, &status, null, null, false, -1);
        if (ret < 0) {
            printf!("%d\n", ret);
        }
        assert!(ret >= 0);
    }

    // wake up thread waiting on given mailbox
    if (desc >= 0) {

        // wait until server is fully active
        while(threads_dormant > 0) {
            yield(-1);
        }

        if (status < 0) {

            // if async fails due to memory, send a synchronous message instead
            if (ipc_send_i32(mb as u32, &status, null, null, true, -1) == IPC_ERR_INTERNAL) {
                ipc_send_i32(mb as u32, &status, null, null, false, -1);
            }
        } else if (desc >= 0) {
            // if the sender isn't waiting, we're blocked forever.
            // This is probably better than timing out and leaving
            // the sender potentially blocked
            ipc_forward_mb(desc as u32, mb as u32, null, 0, null, null,
                    false, -1);
        }
    }
    mailbox_remove(desc as u32);
    abscond(0);
    0
}
