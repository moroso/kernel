/* ipc_test.mb 
 * basic ipc test: creates a thread, child sends a short message to its parent.
 * parent sends a long reply
 * Author: Amanda M. Watson
*/

use shared::ipc_defs::*;
use syslib::*;
use ipclib::{ipc_args_init, ipc_reply};
use mallot::find_pages;
const NUM_ITERS: u32 = 500;
const NUM_THREADS: u32 = 50;

/* checks the exit status of its children; if a child has exited with error,
 * exits with error as well */
fn child_check() {
    let status: i32 = 0;
    while (bide(&status) >= 0) {
        if status < 0 {
            printf!("***ERROR***");
            abscond(-1);
        }
    }
    if (status < 0) {
        printf!("***ERROR***");
        abscond(-1);
    }
}

fn main() -> i32 {
    let j: u32;
    let ret: i32;
    for (j = 0; j < NUM_THREADS; j+=1) {
        ret = repl();
        if (ret == 0) {
            ret = repl();
            if (ret != 0) {
                child_check(); 
                abscond(0);
            }
            mailbox_new();
            let mb_desc = mailbox_new();
            assert!(mb_desc > 0);
            
            let dest_addr: *u8 = 0xdeaaa000 as *u8;
            let len_long = 4096;
            let short_message: u32 = -1;
            let args: ipc_args;
            ipc_args_init(&args);
            args.dest_id = mb_desc as u32;
            args.long_src.len = 0;
            args.long_dest.addr = dest_addr;
            args.long_dest.len = len_long;
            args.short_src.len = 4;
            args.short_src.addr = &short_message as *u8;
            args.short_dest.len = 4;
            args.short_dest.addr = &short_message as *u8;
            args.timeout = -1;
            args.options = 0;
            let i: u32;
            for (i = 0; i < NUM_ITERS; i+=1) {
                ret = repl();
                if (ret == 0) {
                    short_message = get_tid();
                    printf!("%d send returned %d\n", get_tid(), ipc_send(&args));
                    if (args.long_dest.len > 0) {
                        assert!(*(dest_addr as *u32) == get_tid());
                    }
                    abscond(1);
                } else {
                    let src_addr: *u8 = find_pages(1);
                    if (src_addr == null) {
                        printf!("ERR: find_pages failed\n");  
                        abscond(-1);
                    }
                    *(src_addr as *u32) = ret as u32;
                    printf!("%d recv returned %d\n", get_tid(), ipc_recv(&args));
                    assert!(ipc_recv(&args) < 0);
                    assert!(ipc_reply(src_addr, 4096, null, 0) >= 0);
                    assert!((short_message) as i32 == ret);
                }
            }

            child_check(); 
            abscond(0);
        }
    }
    child_check(); 
    printf!("***SUCCESS***\n");
    abscond(0);

    0
}
