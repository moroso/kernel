/* play_test.mb: creates file server, NUM_PROCS procs and NUM_THREAD threads, and has
 * all children apprend their tid NUM_ITERS times to the file.  after all
 * children have exited, parent reads the file 
 *
 * Author Amanda M. Watson
*/


use syslib::{mailbox_new, mailbox_remove, abscond, repl, bide, get_tid,
remove_pages, yield, get_ticks};
use file::{FILE_SERVER_ID, file_create, file_append, file_read};
use server::new_server;
use thrlib::thr_create;
use mallot::{mallot_init, find_pages};
use name::name_server_request;
use string::{strnlen, strncpy};
use shared::consts::PAGE_SIZE;
use locks::mutex::*;

const NUM_PROCS: u32 = 50;
const NUM_THREADS: u32 = 40;
const NUM_ITERS: u32 = 10;
const FILE_NAME: *u8 = "file id";
const WORD_MAX: u32 = 100;

const NUM_THREADS_SERVER: u32 = 100;

// create n threads 
fn spawn_threads(func: fn(*u8) -> (), num_threads: u32) {
    let i: u32;
    let ret: i32;
    for (i = 0; i < num_threads; i+=1) {
        if (ret = thr_create(func, null)) < 0 {
            printf!("TEST ERROR: thr_create failed\n");
            break;
        }
        
    }

}

// create n procs
fn spawn_procs(num_procs: u32) {
    let i: u32;
    let ret: i32;
    for (i = 0; i < num_procs; i+=1) {
        if (ret = repl()) == 0 {
            if mallot_init() < 0 {
                printf!("TEST ERROR: mallot failed to init\n");
                abscond(-1);
            }
            break;
        }
        if ret < 0 {
            printf!("TEST ERROR: repl failed\n");
            abscond(-1);
        }

    }

}

// writes tid NUM_ITERS times to FILE_NAME
fn run_file_query(args: *u8) {
    let fs_mb: i32;
    if (name_server_request(FILE_SERVER_ID, &fs_mb, -1) < 0) {
        printf!("ERROR: name server request failed\n");
        abscond(-1);
    }    

    let write_buffer: *u8 = find_pages(1);

    if (write_buffer == null) {
        printf!("TEST ERROR: unable to allocate write buffer\n");
        abscond(-1);
    }

    snprintf!(write_buffer, WORD_MAX, "%d ", get_tid());

    let word_len = strnlen(write_buffer, WORD_MAX);
    assert!(word_len > 0);

    let i: u32;
    for (i = 0; i < NUM_ITERS; i+= 1) {
        if (file_append(fs_mb as u32, FILE_NAME, write_buffer, word_len, -1) < 0) {
            printf!("ERROR: file append\n");
            abscond(-1);
        }
    }        


    abscond(0);
}

fn main() -> i32 {

    let ret = repl();
    if (ret < 0) {
        printf!("TEST ERROR: repl failed\n");
        abscond(-1);
    }

    let mb = mailbox_new();
    if (mb < 0) {
        printf!("TEST ERROR: failed to allocate new mailbox\n");
        abscond(-1);
    }

    if (ret == 0) {
        let fs_mb = new_server(FILE_SERVER_ID, NUM_THREADS_SERVER, mb);
        if (fs_mb < 0) {
            printf!("ERROR: failed to init server\n");
            abscond(-1);
        }

        if ((ret = file_create(fs_mb as u32, FILE_NAME, null, 0, -1)) < 0) {
            printf!("ERROR in file_create\n");
            abscond(-1);
        }
        let parent = get_tid();

        spawn_procs(NUM_PROCS - 1);
        spawn_threads(run_file_query, NUM_THREADS);
        if (get_tid() != parent) {
            abscond(0);
        }

        let status: i32;
        let procs_alive: i32 = (NUM_PROCS - 1) as i32;
        while(procs_alive > 0 && (ret = bide(&status)) >= 0) {
            procs_alive-=1;
            if (status < 0) {
                printf!("ERROR\n");
                abscond(-1);
            }
        }
        let page_read = find_pages(1);
        let read_size = PAGE_SIZE;
        if (page_read == null) {
            printf!("TEST ERROR: allocating page_read\n");
            abscond(-1);
        }
        if (file_read(fs_mb as u32, FILE_NAME, page_read, &read_size, 0, -1) < 0) {
            printf!("ERROR reading file\n");
            abscond(-1);
        }
        printf!("%s\n", page_read);
        abscond(0);

    } else {
        let status: i32 = 0;
        while(bide(&status) < 0) {
            if (status < 0) {
                printf!("ERROR\n");
                abscond(-1);
            }
        }

        printf!("***SUCCESS***\n");
        abscond(0);

    }
    abscond(0);
    0
}
