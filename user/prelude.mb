mod printf_internal;

mod syslib;
mod locks;
mod name;
mod bad;
mod string;
mod file;
mod thrlib;
mod mallot;
mod shared;
mod utils;
mod ipclib;
mod server;
mod console;
mod arch;

fn print_char(x: i32) -> i32 {
    let c: u8 = x as u8;
    syslib::print(&c, 1);
    x
}

fn rt_abort() {
    while(true) {}
}

// Basically copied and modified from the compiler lib lib
mod printf {
    // We should be more clever and break up strings that are too long,
    // but we don't yet.
    const BOGUS_MAX_PRINTF_LEN: u32 = 1024;

    fn vprintf(fmt: *u8, args: **()) -> i32 {
        let buf: u8[BOGUS_MAX_PRINTF_LEN];
        let n = vsnprintf(&buf[0], BOGUS_MAX_PRINTF_LEN, fmt, args);
        ::prelude::syslib::print(&buf[0], n as u32);
        n
    }
    macro printf!(fmt) { call_printf!(::prelude::printf::vprintf, varargs!(...), $fmt) }

    macro __vsnprintf_out!(c) { {
        if n+1 < size {
            out[n] = $c;
        }
        n += 1;
    } }
    fn vsnprintf(out: *u8, size: u32, fmt: *u8, args: **()) -> i32 {
        let n: u32 = 0;
        do_printf!(fmt, args, __vsnprintf_out!);

        // Null terminate - normal case
        if n < size {
            out[n] = 0;
        } else if size > 0 { // Overflow case - but not if size == 0
            out[size-1] = 0;
        }

        n as i32
    }
    macro snprintf!(s, size, fmt) {
        call_printf!(::prelude::printf::vsnprintf, varargs!(...), $s, $size, $fmt)
    }


    // This is here because it needs to use printf! and because
    // the IR compiler is too slow compiling printf right now.
    macro assert!(cond) {
        if !($cond) {
            printf!("Assertion failed: %s (%s:%d)\n",
                    stringify!($cond),
                    file!(),
                    line!()+1);
            rt_abort();
        }
    }
}

// Software mul/div/mod. Copied from the compiler's prelude; maybe we
// should have some way of sharing those...
fn sw_mul(x: u32, y: u32, is_signed: bool) -> u32 {
	let abs_x: u32 = x;
	let abs_y: u32 = y;
	let invert = false;
	if(is_signed){
		abs_x = if((x as i32) < 0){ ~x + 1 } else{ x };
		abs_y = if((y as i32) < 0){ ~y + 1 } else{ y };
		invert = ((x as i32) < 0) != ((y as i32) < 0);
	}
	let product: u32 = 0;
	while abs_y != 0 {
		if (abs_y & 1) != 0 {
			product = product + abs_x;
		}
		abs_x = abs_x << 1;
		abs_y = abs_y >> 1;
	}
	if invert {
		product = ~product + 1;
	}
	product
}

// compute x / y
fn sw_div(x: u32, y: u32, is_signed: bool) -> u32 {
	let abs_x: u32 = x;
	let abs_y: u32 = y;
	let invert = false;
	if(is_signed){
		abs_x = if((x as i32) < 0){ ~x + 1 } else{ x };
		abs_y = if((y as i32) < 0){ ~y + 1 } else{ y };
		invert = ((x as i32) < 0) != ((y as i32) < 0);
	}

	let i: u32 = 0;
	for (i = 0; i < 32; i += 1) {
		if (abs_y << i) >= 0x80000000 {
			break;
		}
	}

	// At this point, i contains the amount we can shift
	// abs_y so the leftmost 1 bit is in the leftmost position.

	let quotient = 0;
	i += 1;
	do {
		i -= 1;
		if (abs_y << i) <= abs_x {
			abs_x -= abs_y << i;
			quotient |= (1 << i);
		}
	} while (i > 0);

	if(invert){
		quotient = ~quotient + 1;
	}
	quotient
}

// compute x % y
fn sw_mod(x: u32, y: u32, is_signed: bool) -> u32 {
	let abs_x: u32 = x;
	let abs_y: u32 = y;
	let invert = false;

	if(is_signed){
		abs_x = if((x as i32) < 0){ ~x + 1 } else{ x };
		abs_y = if((y as i32) < 0){ ~y + 1 } else{ y };
		invert = ((x as i32) < 0) != ((y as i32) < 0);
	}

	let quotient = sw_div(abs_x, abs_y, false);
	let i = sw_mul(quotient, y, false);
	let res = x - i;

	if invert {
		res = ~res + 1;
	}

	res
}
