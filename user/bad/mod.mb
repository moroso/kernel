/** bad: function declarations for the bad server
 *
 * The bad server's objective is to cause the client (or even better -- the system!) to crash.  
 * While setup should go as planned, client requests will be handled one of three ways:
 * 1. be ignored.  The server will move on to the next client, failing to issue the
 * reply that wakes up the blocked thread.  The client SHOULD time out and
 * return with error IPC_ERR_TIMEOUT, at which point the server should once
 * again be allowed to receive messages.
 * 2. be issued faulty messages.  the server will reply with memory it does not
 * have access to, and if the client receives a non-zero reply in its message
 * buffers, will attempt to dereference it.  This could cause a fault at any
 * point in a faulty IPC implementation.  The client SHOULD receive zero-length
 * long and short messages, rather than the faulty ones, and the server should
 * return with IPC_ERR_MAP, meaning the short message was not backed up by
 * memory. 
 * 3. be forwarded an invalid descriptor.  The server will try to reply back
 * with a descriptor it does not have.  the client SHOULD fail to be forwarded
 * the descriptor and simply return with success, and the server should return
 * with IPC_ERR_MAP  
 *
 * These options are chosen based on the value of the server tid that is
 * requesting them
 *
 * Author Amanda M. Watson
**/


use prelude::server::{server_init, server_thread_init, server_thread_exit};
use prelude::syslib::{abscond, get_tid, get_ticks};
use prelude::rt_abort;
use prelude::shared::consts::PAGE_SIZE;
use prelude::ipclib::{ipc_recv_i32, ipc_reply, ipc_reply_mb, ipc_send_all};
use prelude::shared::ipc_defs::{IPC_ERR_TIMEOUT, IPC_ERR_MIN, IPC_ERR_ARGS,
    IPC_ERR_MAP};

// server id.  Used to open server program and register with the name server
const BAD_SERVER_ID: *u8 = "bad_server";
// denotes whether server is accepting requests
static bad_server_active: bool = false;
// largest descriptor value the system tolerates 
const MAX_DESC_NUM: u32 = 63;


/* server thread code: waits until all threads have woken up and are ready to
 * begin work, then receives and processes requests 
 * mb_arg: the descriptor for the server mailbox, passed as a *u8
 *
 * Does not return.  Threads exit when server is no longer active
*/
fn bad_server_worker(mb_arg: *u8) {
    let mb = mb_arg as i32;
    assert!(mb >= 0);

    if (server_thread_init(mb as u32) < 0) {
        server_thread_exit(&bad_server_active, -1); 
    } 

    let tid = get_tid();

    /*** active server code ***/
    while(bad_server_active) {
        if (ipc_recv_i32(mb as u32, null, -1, null) >= 0) {
            printf!("request received by thread %d\n", tid);
            if (tid%3 == 0) {
                // ignore request
                continue;
            } else if (tid%3 == 1) {
                // send a reply with bogus memory
                assert!(ipc_reply(0xdeadbeef as *u8, PAGE_SIZE, null, 0) ==
                        IPC_ERR_ARGS);  
                assert!(ipc_reply(0xdeadb000 as *u8, PAGE_SIZE - 2, null, 0) ==
                        IPC_ERR_ARGS);  
                assert!(ipc_reply(0xdeadb000 as *u8, PAGE_SIZE, 0xdeadbeef as
                            *u32, PAGE_SIZE) == IPC_ERR_ARGS);  
                assert!(ipc_reply(0xdeadb000 as *u8, PAGE_SIZE, 0xdeadbeef as
                            *u32, 300) == IPC_ERR_MAP);
            } else {
                // forward a descriptor we do not have
                assert!(ipc_reply_mb(null, 0, (get_ticks()%MAX_DESC_NUM) + mb as u32) 
                        == IPC_ERR_MAP);

                assert!(ipc_reply(null, 0, null, 0) 
                        != IPC_ERR_ARGS);

            }
        }
    }
    server_thread_exit(&bad_server_active, -1); 
}

/* called from bad_server program to initialize server.  
 * - num_threads number of threads server will run.  function returns with error
 *   if thr_create fails, but setup will continue if threads exit during the
 *   execution of bad_server_worker
 * - mb: if mb is positive and corresponds to a valid descriptor, the invoking
 *   thread will wait on mb until server setup is complete
 *
 * Returns 0 if server setup is successful, a negative error code otherwise.
*/
fn bad_server_init(num_threads: u32, mb: i32) -> i32 {
    server_init(BAD_SERVER_ID, &bad_server_active, num_threads,
            bad_server_worker, mb, true, -1)  
}

fn bad_server_request(mb: u32, long_dest: *u8, long_len: *u32, short_dest: *u32,
        short_len: *u32, desc: *i32, timeout: i32) -> i32 {

    if (long_len == null || *long_len == 0) {
        return IPC_ERR_MIN - 4;
    }

    if (short_len == null || *short_len == 0) {
        return IPC_ERR_MIN - 4;
    }


    let ret = ipc_send_all(mb, null, 0, null, 0, long_dest, long_len,
            short_dest, short_len, -1, desc, timeout, false);

    if (ret == IPC_ERR_TIMEOUT) {
        return 0;
    } else if (ret < 0) {
        return ret;
    }
    if (short_len != null && *short_len > 0) {
        // attempt to dereference 
        *short_dest = 1;
        return IPC_ERR_MIN - 1;
    }
    if (long_len != null && *long_len > 0) {
        // attempt to dereference
        *long_dest = 2;
        return IPC_ERR_MIN - 2;
    }
    if (desc != null && *desc >= 0) {
        return IPC_ERR_MIN - 3;
    }

    0
}
