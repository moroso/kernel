/* Defines mailbox functions that interface with the user 
 *
 * Author Amanda M. Watson
*/

use structures::mailbox::*;
use structures::desc_table::*;
use utils::slab_alloc::*;
use structures::schedule::get_tcb;

/* allocates a new mailbox, and assigns proc of invoking thread as its owner,
 * adds mailbox to invoking proc's descriptor table.
 * Assumes owner has corresponding proc
 *
 * Returns mailbox descriptor on success, negative error code on OOM failure, or
 * if descriptor table is full */
fn mailbox_new() -> i32 {
    let mb = slub_alloc(sizeof(mailbox_t)) as *mailbox_t; 
    if (mb == null) {
        return MB_ERR_INTERNAL;
    }
    let ret: i32 = mb_init(mb, get_tcb()->proc);
    if (ret < 0) {
        mb_destroy(mb);
    }
    ret
}

/* if desc is a valid descriptor, remove the mailbox it
 * points to.  If the invoking process is removing the last reference to the
 * given mailbox, mailbox is destroyed
 */
fn mailbox_remove(desc: u32) {
    mb_table_remove(&(get_tcb()->proc->mb_desc), desc);
}

/* Closes the descriptor old_desc and moves its mailbox to the descriptor
 * new_desc; if new_desc already points to an active mailbox, its
 * mailbox is removed and replaced by the mailbox at old_desc.  The program
 * can now communicate with the mailbox using the descriptor new_desc.  Returns
 * 0 if move is valid, negative error code otherwise
  */
fn mailbox_move(old_desc: u32, new_desc: u32) -> i32 {
    let table = &(get_tcb()->proc->mb_desc);
    mb_move(table, old_desc, new_desc)
}
