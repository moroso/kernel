use arch::{entry, enable_interrupts};
use arch::entry::*;
use shared::syscall_consts::*;
use threadstuffs::repl::*;
use threadstuffs::abscond::*;
use threadstuffs::bide::*;
use structures::schedule::{get_tcb, yield};
use structures::tcb::*;
use locks::mutex::*;
use loader::perform::*;
use ipc::*;
use structures::VM::*;
use arch::entry::devices::int_register;
mod mailbox;

const MAX_SYSCALLS: u32 = 256;

static syscall_table: (fn(u32, u32, u32, u32, u32) -> i32)[MAX_SYSCALLS];

fn register(idx: u32, syscall: fn(u32, u32, u32, u32, u32) -> i32) {
    assert!(idx < MAX_SYSCALLS);
    assert!(syscall_table[idx] as u32 == 0);
    syscall_table[idx] = syscall;
}

macro syscall!(idx, syscall) {
    ::sys::register($idx, $syscall as fn(u32, u32, u32, u32, u32) -> i32)
}

fn sys_init() {
    let i: u32;
    for (i = 0; i < MAX_SYSCALLS; i += 1) {
        syscall_table[i] = 0 as fn(u32, u32, u32, u32, u32) -> i32;
    }
    syscall!(1, sys_test_sys);
    syscall!(INT_REPL, repl_handler);
    syscall!(INT_ABSCOND, abscond);
    syscall!(INT_BIDE, bide);
    syscall!(INT_THR_REPL, thr_repl_handler);
    syscall!(INT_PRINT, sys_print);
    syscall!(INT_GETTID, get_tid);
    syscall!(INT_PERFORM, perform_handler);
    syscall!(INT_IPC_SEND, ipc_send);
    syscall!(INT_IPC_RECV, ipc_recv);
    syscall!(INT_NEW_PAGES, new_pages);
    syscall!(INT_IPC_REPLY, reply);
    syscall!(INT_GET_TICKS, get_ticks);
    syscall!(INT_MAILBOX_NEW, mailbox::mailbox_new);
    syscall!(INT_YIELD, yield);
    syscall!(INT_MAILBOX_REMOVE, mailbox::mailbox_remove);
    syscall!(INT_REMOVE_PAGES, remove_pages);
    syscall!(INT_MAILBOX_MOVE, mailbox::mailbox_move);
    syscall!(INT_NEW_VID_PAGE, new_vid_buffer);
    syscall!(INT_FREE_VID_PAGE, free_vid_buffer);
    syscall!(INT_INT_REGISTER, int_register);
}


/////////
fn sys_test_sys(i: i32) -> i32 {
    printf!("thread %d test_sys(%d)\n", get_tcb()->tid, i);
    i
}

static debug_print_lock: kmut = KMUT_INIT!(debug_print_lock);
fn sys_print(s: *u8, n: u32) -> i32 {
    // XXX this is super bogus; do validation, etc
    let i: u32;
    kmut_lock(&debug_print_lock);
    for (i = 0; i < n; i += 1) {
        print_char(s[i] as i32);
    }
    kmut_unlock(&debug_print_lock);

    0
}
