use entry;
use entry::*;
use shared::syscall_consts::*;
use threadstuffs::repl::*;
use threadstuffs::abscond::*;
use threadstuffs::bide::*;
use structures::schedule::{get_tcb, yield};
use structures::tcb::*;
use loader::perform::*;
use ipc::*;
use structures::VM::*;
use structures::mailbox::{mailbox_new, mailbox_remove};
use ipc::desc_table::*;

extern fn enable_interrupts();

const MAX_SYSCALLS: u32 = 256;

static syscall_table: (fn(u32, u32, u32, u32, u32) -> i32)[MAX_SYSCALLS];

fn register(idx: u32, syscall: fn(u32, u32, u32, u32, u32) -> i32) {
    assert!(idx < MAX_SYSCALLS);
    assert!(syscall_table[idx] as u32 == 0);
    syscall_table[idx] = syscall;
}

macro syscall!(idx, syscall) {
    ::sys::register($idx, $syscall as fn(u32, u32, u32, u32, u32) -> i32)
}

fn syscall_entry(regs: *uregs) {
    // we're coming from an interrupt gate, so we want to re-enable interrupts
    // for executing a syscall
    enable_interrupts();
    let gp = &regs->gpregs;
    let f: fn(u32, u32, u32, u32, u32) -> i32 = syscall_table[gp->eax];
    if f as u32 == 0 {
        gp->eax = -1 as u32;
        return ();
    }

    gp->eax = f(gp->ecx, gp->edx, gp->ebx, gp->esi, gp->edi) as u32;
}

fn sys_init() {
    entry::register(entry::SYSCALL, syscall_entry);
    syscall!(1, sys_test_sys);
    syscall!(INT_REPL, repl_handler);
    syscall!(INT_ABSCOND, abscond);
    syscall!(INT_BIDE, bide);
    syscall!(INT_THR_REPL, thr_repl_handler);
    syscall!(INT_PRINT, sys_print);
    syscall!(INT_GETTID, get_tid);
    syscall!(INT_PERFORM, perform);
    syscall!(INT_IPC_SEND, ipc_send);
    syscall!(INT_IPC_RECV, ipc_recv);
    syscall!(INT_NEW_PAGES, new_pages);
    syscall!(INT_IPC_REPLY, reply);
    syscall!(INT_GET_TICKS, get_ticks);
    syscall!(INT_MAILBOX_NEW, mailbox_new);
    syscall!(INT_YIELD, yield);
    syscall!(INT_MAILBOX_REMOVE, mailbox_remove);
    syscall!(INT_REMOVE_PAGES, remove_pages);
    syscall!(INT_MAILBOX_MOVE, mb_move_handler);

}


/////////
fn sys_test_sys(i: i32) -> i32 {
    printf!("thread %d test_sys(%d)\n", get_tcb()->tid, i);
    i
}

fn sys_print(s: *u8, n: u32) -> i32 {
    // XXX this is super bogus; do validation, etc
    let i: u32;
    for (i = 0; i < n; i += 1) {
        print_char(s[i] as i32);
    }
    0
}
