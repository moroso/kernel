use consts::*;

use fs::*;

use utils::early_alloc::*;
use utils::buddy_alloc::*;
use utils::slab_alloc::*;

use structures::VM::*;
use structures::tcb::*;
use structures::proc::*;
use structures::schedule::*;
use threadstuffs::repl::*;
use threadstuffs::bide::*;
use threadstuffs::abscond::*;
use loader::*;
use loader::perform::*;
use structures::tcb_dir::tcb_dir_add;
use arch::drivers::timer::*;
use sys::*;
use structures::multiboot::multiboot_info;
use structures::tcb_dir::*;
use utils::list::*;
use video::vid_alloc::vid_init;
use arch::{enable_paging, enable_interrupts};
use arch::entry::*;
use arch::entry::devices::*;

fn user_thread(dummy: *u8) {
    printf!("User thread\n");
    let arg_array = ["foo", "bar", null];
    assert!(perform("init", &arg_array[0], false) >= 0);
    assert!(false);
}

fn idle(dummy: *u8) {
    printf!("Idle starting\n");
    while (true) {

        scheduler_update(-1);
        printf!("idle\n");
    }
}

fn kernel_setup() {
    printf!("Welcome to MorosOS!\n");
    /* this is what we do to avoid trying to wrangle the frame
     * allocator's powers-of-two bullshit */
    /* TODO get rid of this bullshit */
    let frame_table_size: u32 = sizeof(u32) * MAX_FRAME_NUM;
    let x: *u32 = early_alloc(frame_table_size);
    frame_table = x;
    assert!(frame_table != null);

    /*** Basic util initialization ***/
    frame_init();
    slub_init();

    /*** Create an initial page directory and enable paging ***/
    init_PD = slub_alloc(sizeof(PD_t)) as *PD_t; // should be sizeof()
    let pd_init_result = PD_init(init_PD);
    assert!(pd_init_result >= 0);
    entry_init();
    load_PD(init_PD);
    printf!("Enabling paging...\n");
    enable_paging();
    printf!("Enabled.\n");

    fs_init();
    printf!("FS enabled.\n");
    timer_init();
    printf!("Timer enabled.\n");
    sys_init();
    printf!("Sys_init done.\n");
    enable_interrupts();
    printf!("Interrupts enabled.\n");
}

fn create_idle_tcb() {
    let new_tcb: *tcb = thr_create(idle, null, 0);
    assert!(new_tcb != null);
    let proc1: *proc = slub_alloc(sizeof(proc)) as *proc;
    proc_init(proc1, new_tcb, null);
    assert!(proc1 != null);
    run_queue.idle_tcb = new_tcb;
    schedule(new_tcb, QUEUE_FRONT);
}

fn kernel_main(mb_info: *multiboot_info) -> u32 {
    kernel_setup();

    let mode_info = mb_info->vbe_mode_info;
    let framebuffer = mode_info->PhysBasePtr;
    let width = mode_info->XResolution;
    let height = mode_info->YResolution;
    let depth = mode_info->BitsPerPixel / 8;
    printf!("Vid init...\n");
    vid_init(framebuffer, width, height, depth);
    printf!("Exc table init...\n");
    exception_table_init();
    printf!("Done\n");

    let new_tcb: *tcb;
    new_tcb = thr_create(user_thread, null, 0);
    printf!("After thr_create\n");
    tcb_dir_add(new_tcb);
    printf!("TCB added\n");
    assert!(new_tcb != null);
    let proc1: *proc = slub_alloc(sizeof(proc)) as *proc;
    printf!("SLUB\n");
    proc_init(proc1, new_tcb, null);
    printf!("Proc init\n");
    assert!(proc1 != null);
    schedule(new_tcb, QUEUE_FRONT);

    printf!("Idle TCB\n");
    create_idle_tcb();

    printf!("Preempt enable\n");
    preempt_enable();

    /*** Switch to the first thread in the run queue and jump to its execution ***/
    scheduler_update(-1);
    while (true) {};
    0

}
