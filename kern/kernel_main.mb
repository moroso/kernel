use consts::*;

use entry::*;
use fs::*;

use utils::early_alloc::*;
use utils::buddy_alloc::*;
use utils::slab_alloc::*;

use structures::VM::*;
use structures::tcb::*;
use structures::proc::*;
use structures::schedule::*;
use threadstuffs::repl::*;
use threadstuffs::bide::*;
use threadstuffs::abscond::*;
use loader::*;
use entry::*;
use structures::tcb_dir::tcb_dir_add;
use drivers::timer::*;
use sys::*;

/*** Helpful register functions ***/
extern fn get_cr0() -> u32;
extern fn get_cr2() -> u32;
extern fn get_cr3() -> u32;
extern fn get_cr4() -> u32;
extern fn set_cr0(val: u32);
extern fn set_cr3(val: u32);
extern fn set_cr4(val: u32);
extern fn get_esp() -> u32;
extern fn set_esp0(val: u32);
extern fn enable_interrupts();
extern fn disable_interrupts();
extern fn set_eflags(val: u32);


fn user_thread(dummy: *u8) {
    let uregs: uregs;
    assert!(load("basic_test", &uregs) >= 0);
    leave_kernel(&uregs);
    assert!(false);
}

fn parent(dummy: *u8) {
    let page: *u8 = USER_MEM_START as *u8;
    while (page as u32 < (USER_MEM_START + (4096*4))) {
        if (new_user_page(page, &(get_tcb()->proc->PD), READ_WRITE_BIT, KB) < 0) {
            printf2_("failed to allocate page %x for thread %d\n", page as u32,
                    get_tcb()->tid);
            break;
        }
        *(page as *u32) = get_tcb()->tid;
        page = ((page as u32)) + 4096 as *u8;
    }

    let status: u32;
    bide(&status);
    printf2_("Thread %d collected status %d\n", get_tcb()->tid, status);
    abscond();

}

fn idle(dummy: *u8) {
    while (true) {
        printf0_("idle\n");
    }
}

fn kernel_setup() {
    /* this is what we do to avoid trying to wrangle the frame
     * allocator's powers-of-two bullshit */
    /* TODO get rid of this bullshit */
    let frame_table_size: u32 = sizeof(u32) * MAX_FRAME_NUM;
    let x: *u32 = early_alloc(frame_table_size);
    frame_table = x;
    assert!(frame_table != null);

    /*** Basic util initialization ***/
    frame_init();
    slub_init();

    /*** Create an initial page directory and enable paging ***/
    init_PD = slub_alloc(sizeof(PD_t)) as *PD_t; // should be sizeof()
    assert!(PD_init(init_PD) >= 0);
    entry_init();
    load_PD(init_PD);
    enable_paging();

    fs_init();
    timer_init();
    sys_init();
    enable_interrupts();
}

fn create_idle_tcb() {
    let new_tcb: *tcb = thr_create(idle, null, 0);
    assert!(new_tcb != null);
    let proc1: *proc = slub_alloc(sizeof(proc)) as *proc;
    proc_init(proc1, new_tcb);
    assert!(proc1 != null);
    run_queue.idle_tcb = new_tcb;
}

fn kernel_main() -> u32 {
    kernel_setup();

    /*** Create n threads and schedule them ***/

    let i: u32;
    for (i = 0; i < 5; i+=1) {
        let new_tcb: *tcb;
        if (i == 0) {
            new_tcb = thr_create(user_thread, null, 0);
        } else {
            new_tcb = thr_create(parent, null, 0);
        }
        tcb_dir_add(new_tcb);
        assert!(new_tcb != null);
        let proc1: *proc = slub_alloc(sizeof(proc)) as *proc;
        proc_init(proc1, new_tcb);
        assert!(proc1 != null);
        schedule(new_tcb, QUEUE_FRONT);
    }

    create_idle_tcb(); 

    preempt_enable();
    /*** Switch to the first thread in the run queue and jump to its execution ***/
    scheduler_update(-1);
    while (true) {};
    0




}
