use list::*;
use locks::rw::*;
use locks::cond::*;
use locks::lol_atomics::*;
use structures::tcb::*;
use utils::buddy_alloc::*;

struct ref_dir_t {
    dir_head: list_head,
    dir_lock: krw,
}

static tcb_dir: ref_dir_t = ref_dir_t {
    dir_head: LIST_HEAD_INIT!(tcb_dir.dir_head),
    dir_lock: KRW_INIT!(tcb_dir.dir_lock),
};

fn tcb_dir_add(tcb_new: *tcb) {
    krw_write_lock(&(tcb_dir.dir_lock));
    increase_ref(tcb_new);
    list_insert_head(&(tcb_new->dir_link), &(tcb_dir.dir_head));
    krw_write_unlock(&(tcb_dir.dir_lock));
}

fn tcb_dir_remove(tcb_old: *tcb) {
    krw_write_lock(&(tcb_dir.dir_lock));
    list_del(&(tcb_old->dir_link));
    decrease_ref(tcb_old);
    krw_write_unlock(&(tcb_dir.dir_lock));
}

/*** these ref count functions would be in the tcb file if inclusion was sane ***/
fn increase_ref(tcb: *tcb) {
    atomic_add(&(tcb->dir_ref), 1);
}

fn decrease_ref(tcb: *tcb) {
    let ref_old = atomic_add(&(tcb->dir_ref), -1);
    if (ref_old == 1) {
        frame_free(tcb as *u8);
    }
}

fn tcb_lookup(tid: u32) -> *tcb {
    let tcb_node: *tcb;
    krw_read_lock(&(tcb_dir.dir_lock));
    list_foreach_entry!(tcb_node, &(tcb_dir.dir_head), tcb, dir_link, {
        if (tcb_node->tid == tid) {
            increase_ref(tcb_node);
            krw_read_unlock(&(tcb_dir.dir_lock));
            return tcb_node;
        }
    });

    krw_read_unlock(&(tcb_dir.dir_lock));
    null
}

fn tcb_end_lookup(tcb_read: *tcb) {
    decrease_ref(tcb_read);
}
