/** schedule.mh: contains declarations pertaining to the scheduler
 * The scheduler is a lot of things, but the important things for now are the 
 * run queue and preemption.  
 * 
 * The run queue is an ordered list storing runnable
 * tcb's: tcbs are removed from the run queue in round robin (NOTE:
 * experimenting with scheduler policies sounds fun) order, with the latest tcb
 * denoted as "running" (a context switch will allow this new tcb to actually be
 * run).  TCB's are added to the run queue using schedule(), and removed with
 * unschedule().  
 *
 * Rather than explicitly enabling/disabling interrupts, we choose to keep a
 * preemption flag; the running thread will only be preempted if the flag is
 * enabled (even if interrupts and enabled).  
 *
 * Author: Amanda M. Watson
*/

/* Used in schedule() to denote whether a tcb should be added to the front
 * or the back of the run queue.
 */
#define FRONT 0
#define BACK 1

/* a data structure that manages run queue state */
struct rq_master {
    head: list_head, // head of run queue
    running: *tcb, // actively running tcb
    preempt_enabled: u32, // whether preemption is enabled
}
