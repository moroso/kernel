#include "defines.mh"
#include "list.mb"

// Don't do this at home, kids.
#include "stdlib.mb"
#include "early_alloc.mb"
#include "buddy_alloc.mb"
#include "slab_alloc.mb"
#include "locks/mut.mb"
#include "structures/tcb.mb"
#include "structures/schedule.mb"
#include "locks/cond.mb"
#include "locks/sem.mb"
#include "locks/rw.mb"
#include "context/context.mb"
#include "structures/VM.mb"

extern fn get_cr0() -> u32;
extern fn set_cr0(val: u32);
extern fn set_cr3(val: u32);

fn hello() {
    let i: u32 = 0;
    while(true) {
        i+=1;
        if (i == 9000) {
          printf1_("Thread %u: \"goodbye!\"\n", get_tcb()->tid);
          scheduler_update(DESC);
        }

        printf1_("Thread %u: \"hello!\"\n", get_tcb()->tid);
        scheduler_update(-1);
    };
}

fn reply() {
    while(true) {
        printf1_("Thread %u: \"WHAT?\"\n", get_tcb()->tid);
        scheduler_update(-1);
    };
}
fn kernel_main() -> u32 {
    frame_init();
    slub_init();

    let new_tcb: *tcb = slub_alloc(PAGE_SIZE) as *tcb;
    tcb_init(new_tcb);
    set_addr(new_tcb, &hello as *u8);
    schedule(new_tcb, FRONT);

    let new_tcb2: *tcb = slub_alloc(PAGE_SIZE) as *tcb;
    tcb_init(new_tcb2);
    set_addr(new_tcb2, &reply as *u8);
    schedule(new_tcb2, BACK);
    let PD: *PD_t = frame_alloc(0) as *PD_t; // should be sizeof() 
    PD_init(PD);

    set_cr3(PD->PT_entries as u32);
    let cr0: u32 = get_cr0();
    cr0|= (1 << 31);
    set_cr0(cr0);

    scheduler_update(-1);
    while (true) {};
    0
}
