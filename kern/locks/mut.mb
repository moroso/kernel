/** mut.mb: contains structures and "implementation" of kernel mutex
  *
  * These mutexes are dreadfully untintelligent, because the new ISA will require
  * something very different from what we can do in x86. The functions exist here so that
  * once the mutexes do exist, it isn't a hassle to stick them into the code.
  *
  * Once the mutexes are implemented, threads waiting on a lock will deschedule
  * until the lock is made available.
  *
  * Author: Amanda M. Watson
 */


struct kmut {
    lock_available: u32,
    mut_head: list_head,
}

macro KMUT_INIT!(name) {
    kmut { lock_available: 1, mut_head: LIST_HEAD_INIT!($name.mut_head) }
}

fn kmut_init(km: *kmut) {
    km->lock_available = 1;
    list_init_head(&(km->mut_head));
}

fn kmut_lock(km: *kmut) {

    let enable = cond_preempt_disable();
    while (km->lock_available != 1) {
        scheduler_update(-1);
    }

    km->lock_available = 0;
    cond_preempt_enable(enable);
}

fn kmut_unlock(km: *kmut) {
    let enable = cond_preempt_disable();
    km->lock_available = 1;
    cond_preempt_enable(enable);

}
