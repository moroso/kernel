/** rw.mb: declaration and implementation of kernel r/w locks.  Implementation inspired by
 * (https://www.rfc1149.net/blog/2011/01/07/the-third-readers-writers-problem/),
 * a paper that Alex Reece apparently +1's on G+.
 *
 * I think it's only fair that an explanation of the locks be added here.  I'll
 * do that eventually
 * 
 * Author: Amanda M. Watson
 */

struct krw {
    exclusive_sem: ksem,
    order_mut: kmut,
    reader_mut: kmut,
    num_readers: u32, 
}

macro KRW_INIT!(name) {
    krw {
        exclusive_sem: KSEM_INIT!(($name).exclusive_sem, 1),
        order_mut: KMUT_INIT!(($name).order_mut),
        reader_mut: KMUT_INIT!(($name).reader_mut),
        num_readers: 0,
    }
}

fn krw_int(krw: *krw) {
    ksem_init(&krw->exclusive_sem, 1);
    kmut_init(&krw->order_mut);
    kmut_init(&krw->reader_mut);
    krw->num_readers = 0;  
}

fn krw_read_lock(krw: *krw) {
    kmut_lock(&krw->order_mut); // ensure ordering of readers
    kmut_lock(&krw->reader_mut); // new reader
    assert(krw->num_readers >= 0);
    if (krw->num_readers == 0) {
        /* if we are the only reader, request
           exclusive access */
        ksem_wait(&krw->exclusive_sem); 
    }
    krw->num_readers+=1;
    kmut_unlock(&krw->order_mut);    
    kmut_unlock(&krw->reader_mut);   
}

fn krw_read_unlock(krw: *krw) {
    kmut_lock(&krw->reader_mut);
    krw->num_readers-=1;
    if (krw->num_readers == 0) {
        ksem_signal(&krw->exclusive_sem);
    }    
    kmut_unlock(&krw->reader_mut);
}

fn krw_write_lock(krw: *krw) {
    kmut_lock(&krw->order_mut);
    ksem_wait(&krw->exclusive_sem);
    kmut_unlock(&krw->order_mut);
}

fn krw_write_unlock(krw: *krw) {
    ksem_signal(&krw->exclusive_sem);
}
