/* cond.mb: contains implementation of kernel condition variables
 * Author: Amanda M. Watson
 */

#include "cond.mh"

fn kcond_init(kc: *kcond) {
    assert(kc != null); // make sure null is not mapped in VM
    list_init_head(&(kc->head));
}

fn kcond_destroy(kc: *kcond) {
    assert(kc != null);
    assert(list_is_empty(&(kc->head)) == true);
}

fn kcond_wait(kc: *kcond, mut: *kmut) {
    assert(kc != null);
    COND_PREEMPT_DISABLE;
    kmut_unlock(mut);
    list_insert_tail(&get_tcb()->link, &(kc->head));
    scheduler_update(COND)
    COND_PREEMPT_ENABLE;
    kmut_lock(mut);
}

fn kcond_signal(kc: *kcond) {
    assert(kc != null);
    COND_PREEMPT_DISABLE;
    let tcb: *tcb = list_head_entry!(&kc->head, tcb, link);
    if (tcb != null) {
        list_del(&tcb->link);
        assert(tcb->state == COND);
        set_state(tcb, RUNNABLE);
        schedule(tcb, FRONT);
    }
    COND_PREEMPT_ENABLE;
}
