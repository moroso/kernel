/** mut.mb: contains structures and "implementation" of kernel mutex
  *
  * Threads waiting on a mutex to become available will deschedule until they
  * are given exclusive access
  *
  * Author: Amanda M. Watson
 */
use utils::list::*;
use structures::schedule::*;
use consts::*;
use structures::tcb::*;
use utils::stdlib::*;

struct kmut {
    lock_available: u32,
    mut_head: list_head,
}

macro KMUT_INIT!(name) {
    ::locks::mutex::kmut {
        lock_available: 1, mut_head: LIST_HEAD_INIT!($name.mut_head) }
}

fn kmut_init(km: *kmut) {
    km->lock_available = 1;
    list_init_head(&(km->mut_head));
}

fn kmut_lock(km: *kmut) {
    let enable = cond_preempt_disable();

    while (km->lock_available != 1) {
        list_insert_head(&(get_tcb()->link), &(km->mut_head));
        scheduler_update(STATE_MUTEX);
    }

    km->lock_available = 0;
    cond_preempt_enable(enable);
}

fn kmut_unlock(km: *kmut) {
    let enable = cond_preempt_disable();
    let next_tcb: *tcb = list_head_entry!(&km->mut_head, tcb, link); 

    if (next_tcb != null) {
        list_del(&next_tcb->link);
        set_state(next_tcb, STATE_RUNNABLE);
        schedule(next_tcb, QUEUE_FRONT);
    }

    km->lock_available = 1;
    cond_preempt_enable(enable);
}

// so that deadlock is avoided, sort the addresses of the two locks to ensure
// they're always taken in the same order
fn kmut_2lock(mut1: *kmut, mut2: *kmut) {
    let first_lock: *kmut = min(mut1 as u32, mut2 as u32) as *kmut;
    let second_lock: *kmut = max(mut1 as u32, mut2 as u32) as *kmut;
    kmut_lock(first_lock);
    kmut_lock(second_lock);
}

fn kmut_2unlock(mut1: *kmut, mut2: *kmut) {
    kmut_unlock(mut1);
    kmut_unlock(mut2);
}
