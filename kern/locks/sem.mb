/** sem.mb: declarations and implementation of kernel's semaphores 
 *  Author: Amanda M. Watson
 */

struct ksem {
  cond: kcond,
  count: u32,
  mut: kmut,
}

macro KSEM_INIT!(name, count) {
    ksem {
        cond: KCOND_INIT!(($name).cond),
        count: $count,
        mut: KMUT_INIT!(($name).mut),
    }
}

fn ksem_init(ks: *ksem, count: u32) {
    assert(count >= 0);
    kcond_init(&ks->cond);
    kmut_init(&ks->mut);
    ks->count = count;
}

fn ksem_wait(ks: *ksem) {
    kmut_lock(&ks->mut);
    while (ks->count <= 0) {
        kcond_wait(&ks->cond, &ks->mut);
    }
    ks->count -= 1;
    kmut_unlock(&ks->mut);
}

fn ksem_signal(ks: *ksem) {
    kmut_lock(&ks->mut);
    ks->count += 1;
    if (ks->count >= 1) {
        kcond_signal(&ks->cond);
    }
    kmut_unlock(&ks->mut);
}

