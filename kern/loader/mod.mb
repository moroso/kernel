/** loader/mod.mb
 *
 *  contains the loader, used by the kernel to load user programs, and the
 *  exe header format.
 *
 *  TODO allocate MB as well as KB?
 *  Author: Amanda M. Watson
**/
use fs::fs_read;
use utils::slab_alloc::{slub_alloc, slub_free};
use utils::buddy_alloc::{frame_alloc, frame_free};
use consts::{USER_DS, USER_CS, PAGE_SIZE};
use structures::VM::{new_user_range, free_user_range, is_user_addr, READ_WRITE_BIT, KB};
use structures::schedule::get_tcb;
use entry::uregs;
use utils::stdlib::mos_memcpy;


extern fn get_eflags() -> u32;

// Header for the bs executable file format
struct bsexe_header {
    magic: u8[4], // should be "MROE"
    binary_size: u32,
    mapping_size: u32,
    load_addr: u32,
    entry_point: u32
}


/* load a new program with name filename into the VM.  populates ureg with the
 * registers to pass to leave_kernel to load new program.  Returns with error if
 * file cannot be correctly loaded */
/* FIXME: we maybe should just copy the whole thing at once, although doing
 * it a bit at a time might make it easier to port this to a real fs? */
fn load(filename: *u8, ureg: *uregs) -> i32 {
    assert!(ureg != null);

    let header: bsexe_header;

    if (fs_read(filename, &header as *u8, sizeof(bsexe_header), 0) == -1) {
        return -2;
    }

    // allocate an additional page for the user stack
    let user_esp = header.load_addr + header.mapping_size + PAGE_SIZE;

    /* allocate the full mapping size */
    if (new_user_range(header.load_addr as *u8, user_esp as *u8,
                       &get_tcb()->proc->PD, READ_WRITE_BIT, KB) < 0) {
        return -4;
    }

    /* copy the binary data in */
    let length_read: i32 = fs_read(filename, header.load_addr as *u8,
                                   header.binary_size,
                                   sizeof(bsexe_header));
    if (length_read != header.binary_size as i32) {
        // XXX: an assert seems to trip when this failure happens
        free_user_range(header.load_addr as *u8, user_esp as *u8,
                        &get_tcb()->proc->PD);
        return -5;
    }

    /* Populate the ureg with the appropriate info for running the file */
    ureg->esp = user_esp; // allocated in the for-loop
    ureg->eip = header.entry_point;
    let eflags: u32 = get_eflags();
    ureg->eflags = eflags; // TODO do we have to set anything?
    ureg->ss = USER_DS;
    ureg->ds = USER_DS;
    ureg->es = USER_DS;
    ureg->cs = USER_CS;

    0
}
