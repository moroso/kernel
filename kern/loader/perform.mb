/**/
use structures::proc::*;
use structures::schedule::get_tcb;
use structures::VM::*;
use arch::entry::*;
use arch::regs::{uregs, set_sp, get_sp};
use arch::loader::{stack_grows_up, finish_perform};
use loader::*;
use utils::stdlib::mos_memcpy;
use utils::string::{mos_strncpy, mos_strnlen};
use utils::user_mem::*;

const MAX_ARG_LEN: u32 = 500;
const MAX_ARG_NUM: u32 = 50;

const PERF_ERR_MEM: i32 = -1;
const PERF_ERR_ARGS: i32 = -2;

fn perform_handler(filename: *u8, argv: **u8) -> i32 {
    let filename_kern: u8[MAX_ARG_LEN];
    if (copy_from_user(&filename_kern[0], filename, MAX_ARG_LEN) < 0) {
        return PERF_ERR_MEM;
    }

    let args_kern: (*u8)[MAX_ARG_NUM];
    let i: u32 = 0;
    for (i = 0; i < MAX_ARG_NUM; i+=1) {
        if (copy_from_user(&(args_kern[i]) as *u8, &argv[i] as *u8, sizeof(*u8)) < 0) {
            printf!("HERE %p\n", &argv[i]);
            return PERF_ERR_MEM;
        }
        if ((args_kern[i]) == null) {
            break;
        }
    }

    if (i == MAX_ARG_NUM) {
        return PERF_ERR_ARGS;
    }

    perform(&filename_kern[0], &args_kern[0], true)
}

fn perform(filename: *u8, argv: **u8, from_user: bool) -> i32 {

    /* kernel-mem buffer for storing arguments.  Really, we should read this
     * into a page directly, but are not doing this because we do not want to expose
     * get_frame at this moment */
    let arg_buffer: u8[MAX_ARG_LEN + 1];
    let arg_pointer: *u8 = &arg_buffer[0];

    let word_idx: u32 = 0;
    // TODO args prooobably should be reversed?

    /* reads all strings in argv into buffer */
    if (argv != null || word_idx >= MAX_ARG_NUM) {
        while(argv[word_idx] != null) {
            // "Staging" area: we copy here, then check that we have room to put it
            // into arg_buffer, and then copy it there if so.
            let temp_buffer: u8[MAX_ARG_LEN + 1];
            let buffer_len: u32 = (arg_pointer as u32) - (&arg_buffer[0] as u32);
            let str_len = 0;

            if (from_user) {
                if ((str_len = copy_string_from_user(&temp_buffer[0], argv[word_idx],
                                MAX_ARG_LEN)) < 0) {
                    return PERF_ERR_MEM;
                }

            } else {
                mos_strncpy(&temp_buffer[0], argv[word_idx],
                            mos_strnlen(argv[word_idx], MAX_ARG_LEN));
                str_len = mos_strnlen(argv[word_idx], MAX_ARG_LEN);
            }

            /* if the arguments extend beyond our buffer length, return with
             * failure */
            if (buffer_len + str_len > MAX_ARG_LEN) {
                return PERF_ERR_ARGS;
            }

            mos_strncpy(arg_pointer, &temp_buffer[0], str_len);

            arg_pointer += str_len + 1;
            word_idx += 1;
        }
    }

    let num_args = word_idx;

    let proc: *proc = get_tcb()->proc;
    let old_entries: **u32 = proc->PD.PT_entries;
    proc->PD.PT_entries = null;

    if PD_init(&(proc->PD)) < 0 {
        proc->PD.PT_entries = old_entries;
        load_PD(&(proc->PD));
        printf!("error\n");
        return -1;
    }

    load_PD(&(proc->PD));

    let uregs: uregs;

    if (load(&filename[0], &uregs) < 0) {
        PD_destroy(&(proc->PD), old_entries);
        printf!("error\n");
        return -2;
    }

    // The space we need for the arguments themselves.
    let buffer_len: u32 = (arg_pointer as u32) - (&arg_buffer[0] as u32);
    // How much space we need to reserve for the argument pointers.
    let arg_ptr_len = num_args * sizeof(u32);
    // Total length we allocate on the stack.
    let total_len = buffer_len + arg_ptr_len;

    /* copy buffer of strings onto stack */
    let arg_start: *u8 = if stack_grows_up {
        // If the stack grows up, arguments go right after the pointers,
        // which are right after where the stack pointer points.
        get_sp(&uregs) + arg_ptr_len as *u8
    } else {
        // If the stack grows down, arguments go at the end of the stack,
        // before where sp points.
        (get_sp(&uregs) - buffer_len) as *u8
    };

    // Argument pointers come right before the arguments themselves.
    let arg_ptrs: *u32 = (arg_start - arg_ptr_len) as *u32;

    // Copy the actual arguments.
    if (from_user) {
        if (copy_to_user(arg_start, &arg_buffer[0], buffer_len) < 0) {
            PD_destroy(&(proc->PD), old_entries);
            return PERF_ERR_MEM;
        }
    } else {
        mos_memcpy(arg_start, &arg_buffer[0], buffer_len);
    }

    PD_entries_destroy(old_entries);

    let arg_addr = arg_start;

    let i: u32;
    /* create array of addresses of the aforementioned strings */
    for (i = 0; i < num_args; i += 1) {
        arg_ptrs[i] = arg_addr as u32;

        arg_addr += mos_strnlen(arg_addr, MAX_ARG_LEN) + 1;
    }

    if stack_grows_up {
        set_sp(&uregs, (arg_start + buffer_len) as u32);
    } else {
        set_sp(&uregs, (&arg_ptrs[-1]) as u32);
    }

    finish_perform(&uregs, num_args, &arg_ptrs[0] as **u8);

    leave_kernel(&uregs);

    assert!(false);
    0
}
