/**/
use structures::proc::*;
use structures::schedule::get_tcb;
use structures::VM::*;
use entry::*;
use loader::*;
use utils::stdlib::mos_memcpy;
use utils::string::{mos_strncpy, mos_strnlen};
const MAX_ARG_LEN: u32 = 500;
const MAX_ARG_NUM: u32 = 50;

fn perform(filename: *u8, argv: **u8) -> i32 {
    /* kernel-mem buffer for storing arguments.  Really, we should read this
     * into a page directly, but are not doing this because we do not want to expose
     * get_frame at this moment */
    let arg_buffer: u8[MAX_ARG_LEN];
    let arg_pointer: *u8 = &arg_buffer[0];

    let word_idx: u32 = 0;
    // TODO args prooobably should be reversed?

    /* reads all strings in argv into buffer */
    if (argv != null || word_idx >= MAX_ARG_NUM) {
        while(argv[word_idx] != null) {
            let buffer_len: u32 = (arg_pointer as u32) - (&arg_buffer[0] as u32);
            /* if the arguments extend beyond our buffer length, return with
             * failure */
            if (buffer_len + mos_strnlen(argv[word_idx],
                        MAX_ARG_LEN) > MAX_ARG_LEN) {
                return -1;
            } 

            mos_strncpy(arg_pointer, argv[word_idx], mos_strnlen(argv[word_idx],
                        MAX_ARG_LEN));

            arg_pointer+=mos_strnlen(argv[word_idx], MAX_ARG_LEN) + 1;

            word_idx+=1;
        }
    }
    let buffer_len: u32 = (arg_pointer as u32) - (&arg_buffer[0] as u32);

    // TODO replace this with real people memory validation
    let file_buffer: u8[500];
    mos_strncpy(&file_buffer[0], filename, 500);

    let proc: *proc = get_tcb()->proc;
    let old_entries: **u32 = proc->PD.PT_entries;    
    proc->PD.PT_entries = null;

    if PD_init(&(proc->PD)) < 0 {
        proc->PD.PT_entries = old_entries;
        load_PD(&(proc->PD)); 
        printf!("error\n");
        return -1;
    }

    load_PD(&(proc->PD)); 

    let uregs: uregs;

    if (load(&file_buffer[0], &uregs) < 0) {
        PD_destroy(&(proc->PD), old_entries); 
        printf!("error\n");
        return -2;
    }

    PD_entries_destroy(old_entries); 

    /* copy buffer of strings onto stack */
    let arg_start: *u8 = (uregs.esp - buffer_len) as *u8;
    mos_memcpy((uregs.esp - buffer_len) as *u8, &arg_buffer[0], buffer_len);
    uregs.esp-=4;
    uregs.esp-= buffer_len;
    let arg_addr = arg_start;

    let i:u32;
    /* create array of addresses of the aforementioned strings */
    for (i = 0; i < word_idx; i+=1) {
        *(uregs.esp as *u32) = arg_addr as u32; 
        arg_addr+=sizeof(*u8);
        uregs.esp-=sizeof(u32);
    }

    /* place address of array (argv) and argument count (argc) on stack as
     * arguments to the program getting called */
    *(uregs.esp as *u32) = uregs.esp + sizeof(*u8);
    uregs.esp-=sizeof(u32);
    *(uregs.esp as *u32) = word_idx;
    uregs.esp-=sizeof(u32);

    leave_kernel(&uregs);

    assert!(false);
    0
}
