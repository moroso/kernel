use consts;
use structures::tcb::gpregs;
use structures::VM::*;
use structures::schedule::*;
use locks::mutex::*;
use locks::rendezvous::rend_timeout_remove;
use sys::syscall_table;
use arch::enable_interrupts;
use arch::drivers::keyboard::keyboard_handler;
mod devices;

const MAX_FAULT_NUMS: u32 = 256;

const PAGE_FAULT: u32 = 14;
const TIMER_INTER: u32 = 32;
const KBD_INTER: u32 = 33;
const SYSCALL: u32 = 0x80;

struct uregs {
    ds: u32,
    es: u32,

    gpregs: gpregs,

    pf_addr: u32,
    cause: u32,

    error_code: u32,
    eip: u32,
    cs: u32,
    eflags: u32,
    esp: u32,
    ss: u32,
}

static fault_table: (fn(*uregs) -> ())[MAX_FAULT_NUMS];

static ticks: u32 = 0;

extern fn idt_base() -> *u32;
extern fn entry_stubs();
const STUB_SIZE: u32 = 16;

fn entry_setup() {
    let b = idt_base();
    let addr = &entry_stubs as u32;

    let i: u32;
    for (i = 0; i < 256; i += 1) {
        b[i*2] = 0x00100000 | (addr & 0xFFFF);
        let dpl = 3;
        b[i*2+1] = (addr & 0xFFFF0000)
                  | 0x8e00 | (dpl << 13);

        addr += STUB_SIZE;
    }
}

fn syscall_entry(regs: *uregs) {
    // we're coming from an interrupt gate, so we want to re-enable interrupts
    // for executing a syscall
    enable_interrupts();
    let gp = &regs->gpregs;
    let f: fn(u32, u32, u32, u32, u32) -> i32 = syscall_table[gp->eax];
    if f as u32 == 0 {
        gp->eax = -1 as u32;
        return ();
    }

    gp->eax = f(gp->ecx, gp->edx, gp->ebx, gp->esi, gp->edi) as u32;
}

fn register(idx: u32, handler: fn(*uregs) -> ()) {
    assert!(idx < MAX_FAULT_NUMS);
    assert!(fault_table[idx] as u32 == 0);
    fault_table[idx] = handler;
}

fn entry_init() {
    entry_setup();

    register(SYSCALL, syscall_entry);
    register(PAGE_FAULT, page_fault_handler);
    register(TIMER_INTER, timer_handler);
    register(KBD_INTER, keyboard_handler);
}

extern fn pic_acknowledge_any_master();

struct exception_record {
    try: u32,
    catch: u32
}
extern static user_copy_handler: exception_record;

extern fn get_cr2() -> u32;

fn page_fault_handler(regs: *uregs) {
    page_fault_handler_common(regs->cs == consts::KERNEL_CS,
                              &regs->eip,
                              regs->esp,
                              get_cr2() as *u8);
}

fn timer_handler(regs: *uregs) {
    ticks += 1;
    pic_acknowledge_any_master();

    if (is_preempt_enabled()) {
        rend_timeout_remove(ticks);
        scheduler_update(-1);
    }
}

fn get_ticks() -> u32 {
    ticks
}

fn kbd_handler(regs: *uregs) {
    pic_acknowledge_any_master();

    printf!("took kbd interrupt, don't care\n");
}


fn kernel_entry(regs: *uregs) {
    let f: fn(*uregs) -> () = fault_table[regs->cause];
    if f as u32 == 0 {
        printf!("took a fault %u at 0x%08x\n", regs->cause, regs->eip);
        assert!(false);
    }

    f(regs);

}

extern fn leave_kernel(ureg: *uregs);
