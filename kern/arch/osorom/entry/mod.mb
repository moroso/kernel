use sys::{MAX_SYSCALLS, syscall_table};
use utils::stdlib::mos_memset;
use structures::VM::page_fault_handler_common;
use structures::schedule::{is_preempt_enabled, scheduler_update};
use locks::rendezvous::rend_timeout_remove;

use arch::enable_interrupts;
use arch::drivers::timer::{TIMER, TIMER_CONTROL_TIMER_INT};
use arch::regs::uregs;

mod devices;

const SYSCALL: u32 = 0x80;

const EPC_KERNELMODE: u32 = 0x1;

enum exception_t {
    EXC_NO_ERROR,
    EXC_PAGEFAULT_ON_FETCH,
    EXC_ILLEGAL_INSTRUCTION,
    EXC_INSUFFICIENT_PERMISSIONS,
    EXC_DUPLICATE_DESTINATION,
    EXC_PAGEFAULT_ON_DATA_ACCESS,
    EXC_INVALID_PHYSICAL_ADDRESS,
    EXC_DIVIDE_BY_ZERO,
    EXC_INTERRUPT,
    EXC_SYSCALL,
    EXC_BREAK,
}

extern "bare" fn leave_kernel(uregs: *uregs) {
    asm!(
            "{ r31 <- *l(r0 + 0x7c); r30 <- *l(r0 + 0x78); }"
            "{ r29 <- *l(r0 + 0x74); r28 <- *l(r0 + 0x70); }"
            "{ r27 <- *l(r0 + 0x6c); r26 <- *l(r0 + 0x68); }"
            "{ r25 <- *l(r0 + 0x64); r24 <- *l(r0 + 0x60); }"
            "{ r23 <- *l(r0 + 0x5c); r22 <- *l(r0 + 0x58); }"
            "{ r21 <- *l(r0 + 0x54); r20 <- *l(r0 + 0x50); }"
            "{ r19 <- *l(r0 + 0x4c); r18 <- *l(r0 + 0x48); }"
            "{ r17 <- *l(r0 + 0x44); r16 <- *l(r0 + 0x40); }"
            "{ r15 <- *l(r0 + 0x3c); r14 <- *l(r0 + 0x38); }"
            "{ r13 <- *l(r0 + 0x34); r12 <- *l(r0 + 0x30); }"
            "{ r11 <- *l(r0 + 0x2c); r10 <- *l(r0 + 0x28); }"
            "{  r9 <- *l(r0 + 0x24);  r8 <- *l(r0 + 0x20); }"
            "{  r7 <- *l(r0 + 0x1c);  r6 <- *l(r0 + 0x18); }"
            "{  r5 <- *l(r0 + 0x14);  r4 <- *l(r0 + 0x10); }"
            "{  r3 <- *l(r0 + 0x0c);  r2 <- *l(r0 + 0x08); }"
            "{  r1 <- *l(r0 + 0x84); }"
            // TODO: load predicate registers and OVF.
            "{ epc <- r1; r1 <- *l(r0 + 0x4); }"
            "{ eret; r0 <- *l(r0); }"
            );
}

fn adjust_for_child_repl(regs: *uregs) {
    // This function is called just before returning
    // in the child of a repl call.
    // Registers from the parent process were copied, but
    // we can't return to the exact same address or we'd just
    // call repl again in a right loop. This adjusts ip so that
    // we return to the next address instead.
    regs->ip += 0x10;
}

fn register(idx: u32, handler: fn(*uregs) -> ()) {
    // Empty: we don't use this mechanism.
    // Handlers for peripheral interrupts are called by the ISR.
}

fn entry_init() {
    set_exception_handler(isr_asm);
}


extern "bare" fn set_exception_handler(addr: fn() -> ()) {
    asm!("{ EHA <- r0; }"
         "{ b r31 + 1; }");
}

extern "bare" fn get_exception_handler_address() -> u32 {
    asm!("{ r0 <- EHA; }"
         "{ b r31 + 1; }");
}

extern "bare" fn isr_asm() {
    // This is our interrupt handler wrapper. It is responsible for saving all state
    // that needs to be saved, and then calling the main interrupt handler.
    asm!(   // Save the original values of r0 and r1 in SP0 and SP1, for later.
            "{ SP0 <- r0; }"
            // Load the address of the kernel stack from SP2.
            "{ r0 <- SP2; }"
            "{ SP1 <- r1; }"
            // r0 contains the starting address of the current kstack.
            // We stash the value of p0 in the lowest bit of it for later.
            "{ r1 <- EPC; p0? r0 <- r0 | 1; }"
            // p0 now stores whether we were in kernel mode when this happened.
            "{ p0 <- r1 & 1 }"
            // If we were in userspace, we read the kstack address from SP2
            // (whose value is now in r0). If we're in the kernel, r30
            // already contains a pointer to a valid part of the active kstack.
            // Note that 0x7c is -0x10 from where r30 will be after this instruction;
            // that is, it's where on the stack r30 should go.
            "{  p0? *l(r30 + 0x7c) <- r30; "
            // Note: the lowest two bits of the address for word-sized stores are
            // ignored, so this is safe even though the low bit of r0 may be set.
            "  !p0? *l(r0 + 0x7c) <- r30; "
            "   p0? r30 <- r30 + 0x8c; "
            "  !p0? r30 <- r0 + 0x8c; }"
            // We now start saving registers on the stack. Register order is:
            // (offsets relative to r30)
            // 0x8c 0x88 0x84    0x10 0xc         0x8         0x4
            // OVF  r0,  r1, ... r30, r31, [ predicate regs ] EPC.
            // Note that r30 was just saved, but none of the others have been saved yet.
            // Error flags are loaded into registers r0 .. r6, with epc in r1.
            // (It's an odd order, but it's convenient!)

            // TODO: Put OVF in the regs structure (at the end), not at the beginning
            // of the stack. Remember to update repl_handler too!

            // Note: here we restore p0 from the low bit of r0.
            "{ r0 <- OVF; p0 <- r0 & 1; r30 <- r30 & long; long 0xfffffffe;}"
            // Save OVF, and load SP0 (which contains the original value of r0).
            "{ r0 <- SP0; *l(r30 - 0x8c) <- r0; }"
            // Save the original r0, and load SP1 (which contains the original value of r1).
            "{ r0 <- SP1; *l(r30 - 0x88) <- r0; }"
            // Save each general-purpose register to memory, and load the coprocessor registers
            // into them instead.
            // (Recall that r0 now has the original value of r1.)
            "{ r0 <- EC0; *l(r30 - 0x84) <- r0; }"
            "{ r2 <- EC1; *l(r30 - 0x80) <- r2; }"
            "{ r3 <- EC2; *l(r30 - 0x7c) <- r3; }"
            "{ r4 <- EC3; *l(r30 - 0x78) <- r4; }"
            "{ r5 <- EA0; *l(r30 - 0x74) <- r5; }"
            "{ r6 <- EA1; *l(r30 - 0x70) <- r6; }"
            "{ *l(r30 - 0x6c) <- r7; *l(r30 - 0x68) <- r8; r7 <- 3; }"

            // once coprocessor regs are in GPRs we can turn interrupts on.
            // TODO: Do we actually want to turn them on here? Leaving them off for now
            // so that the handler can clear interrupt bits if needed.
            //"{ PFLAGS <- r7; *l(r30 - 0x64) <- r9; }"
            "{                 *l(r30 - 0x64) <- r9; }"

            "{ *l(r30 - 0x60) <- r10; *l(r30 - 0x5c) <- r11; }"
            "{ *l(r30 - 0x58) <- r12; *l(r30 - 0x54) <- r13; }"
            "{ *l(r30 - 0x50) <- r14; *l(r30 - 0x4c) <- r15; }"
            "{ *l(r30 - 0x48) <- r16; *l(r30 - 0x44) <- r17; }"
            "{ *l(r30 - 0x40) <- r18; *l(r30 - 0x3c) <- r19; }"
            // Here we also start saving the predicate registers to r7.
            "{ *l(r30 - 0x38) <- r20; *l(r30 - 0x34) <- r21; r7 <- 0; }"
            "{ *l(r30 - 0x30) <- r22; *l(r30 - 0x2c) <- r23; p0? r7 <- r7 | 0b001; }"
            "{ *l(r30 - 0x28) <- r24; *l(r30 - 0x24) <- r25; p1? r7 <- r7 | 0b010; }"
            "{ *l(r30 - 0x20) <- r26; *l(r30 - 0x1c) <- r27; p2? r7 <- r7 | 0b100; }"
            "{ *l(r30 - 0x18) <- r28; *l(r30 - 0x14) <- r29; }"
            // Remember: r30 was already stored!
            "{ *l(r30 - 0x0c) <- r31; *l(r30 - 0x08) <- r7; }"

            // Save EPC (which is in r1)
            "{ *l(r30 - 0x04) <- r1; r7 <- r30 - 0x04; }"

            // Save a pointer to the regs structure.
            // TODO: this can be optimized.
            "{ r1 <- r30 - 0x88; }"
            "{ *l(r30) <- r1; r1 <- *l(r30 - 0x04); r30 <- r30 + 4; }"

            // Call the actual interrupt handler!
            "{ bl __arch__entry__isr; }"

            "{ r30 <- r30 - 4; }"

            // Now we have to restore all state. r30, r1, and r0 wait until later.
            "{ r31 <- *l(r30 - 0x0c); r29 <- *l(r30 - 0x14); }"
            "{ r28 <- *l(r30 - 0x18); r27 <- *l(r30 - 0x1c); }"
            "{ r26 <- *l(r30 - 0x20); r25 <- *l(r30 - 0x24); }"
            "{ r24 <- *l(r30 - 0x28); r23 <- *l(r30 - 0x2c); }"
            "{ r22 <- *l(r30 - 0x30); r21 <- *l(r30 - 0x34); }"
            "{ r20 <- *l(r30 - 0x38); r19 <- *l(r30 - 0x3c); }"
            "{ r18 <- *l(r30 - 0x40); r17 <- *l(r30 - 0x44); }"
            "{ r16 <- *l(r30 - 0x48); r15 <- *l(r30 - 0x4c); }"
            "{ r14 <- *l(r30 - 0x50); r13 <- *l(r30 - 0x54); }"
            "{ r12 <- *l(r30 - 0x58); r11 <- *l(r30 - 0x5c); }"
            "{ r10 <- *l(r30 - 0x60);  r9 <- *l(r30 - 0x64); }"
            "{  r8 <- *l(r30 - 0x68);  r7 <- *l(r30 - 0x6c); }"
            "{  r6 <- *l(r30 - 0x70);  r5 <- *l(r30 - 0x74); }"
            "{  r4 <- *l(r30 - 0x78);  r3 <- *l(r30 - 0x7c); }"
            // Almost done! We load the saved predicate registers into r0,
            // disable interrupts, and restore predicates.
            "{  r2 <- *l(r30 - 0x80);  r0 <- *l(r30 - 0x08); r1 <- 0b10; }"
            "{ PFLAGS <- r1; p0 <- r0 & 0b001; p1 <- r0 & 0b010; p2 <- r0 & 0b100; }"
            // Restore EPC, OVF, r1, and r0.
            "{  r0 <- *l(r30 - 0x88);  r1 <- *l(r30 - 0x04); }"
            "{ EPC <- r1; r1 <- *l(r30 - 0x8c); }"
            "{ OVF <- r1; r1 <- *l(r30 - 0x84); }"
            // Return, and finally restore r30.
            "{ eret; r30 <- *l(r30 - 0x10); }"
            );
}

fn isr(ec0: exception_t, epc: u32,
       ec1: exception_t,
       ec2: exception_t,
       ec3: exception_t, ea0: u32, ea1: u32,
       new_epc: *u32, regs: *uregs) {
    // TODO: ovf is not actually stored in regs, and should be!
    // (instead, right now, it's stored just before regs.)
    // Remember to update repl_handler and thr_repl_handler
    // when that's fixed!
    // TODO: more things need to be handled here.
    if ec0 == EXC_INTERRUPT {
        printf!("Interrupt\n");
        TIMER->control &= ~(1 << TIMER_CONTROL_TIMER_INT);
        timer_handler(regs);
    } else if is_pagefault(ec0) || is_pagefault(ec1) {
        printf!("Pagefault: %x %x (%x)\n", ea0, ea1, epc);
        page_fault_handler(ec0, epc, ec1, ec2, ec3, ea0, ea1, new_epc, regs);
    } else if ec0 == EXC_SYSCALL {
        enable_interrupts();
        // TODO: error checking.
        let result: u32 = syscall_table[regs->r[0]](regs->r[1],
                                                    regs->r[2],
                                                    regs->r[3],
                                                    regs->r[4],
                                                    regs->r[5],
                                                    ) as u32;
        regs->r[0] = result;
        *new_epc += 0x10;
    } else {
        printf!("Other\n");
        *new_epc += 0x10;
    }
    if ec0 != EXC_SYSCALL {
        printf!("New EPC = %x, old EPC = %x\n", *new_epc, epc);
    }
}

static ticks: u32 = 0;

fn timer_handler(regs: *uregs) {
    ticks += 1;

    if (is_preempt_enabled()) {
        rend_timeout_remove(ticks);
        scheduler_update(-1);
    }
}

fn get_ticks() -> u32 {
    ticks
}


fn is_pagefault(ec: exception_t) -> bool {
    match ec {
        EXC_PAGEFAULT_ON_FETCH => true,
        EXC_PAGEFAULT_ON_DATA_ACCESS => true,
        _ => false,
    }
}

fn page_fault_handler(ec0: exception_t, epc: u32,
                      ec1: exception_t,
                      ec2: exception_t,
                      ec3: exception_t,
                      ea0: u32, ea1: u32, new_epc: *u32, regs: *uregs) {
    let is_kmode: bool = (epc & EPC_KERNELMODE != 0);
    let ea: u32;

    if (is_pagefault(ec0)) {
        ea = ea0;
    } else {
        assert!(is_pagefault(ec1));
        ea = ea1;
    }

    page_fault_handler_common(is_kmode,
                              new_epc,
                              regs->r[30],
                              ea as *u8);
}

struct exception_record {
    try: u32,
    catch: u32
}
static user_copy_handler: exception_record = exception_record {
    try: user_copy_try as u32,
    catch: user_copy_catch as u32,
};

extern "bare" fn user_copy_try(to: *u8, from: *u8, n: u32) {
    asm!(
        // The try/catch system we use for userspace copies requires that only
        // the first packet here be able to fault, so it needs to do the reads
        // and the writes (since user_copy is used for copies to and from
        // userspace). To do this, writes "lag" reads by one cycle, and we use
        // p0 and p1 to take care of the boundary conditions.
        //
        // The caller is responsible for checking if the number of bytes to copy
        // is 0. This should only ever be called if there is at least one character
        // to copy.
        //
        // On entering this function:
        // - p0 should be false.
        // - p1 should be true.
        // - r0 should point to the first address to write to
        // - r1 should point to the first address to read from
        // - r2 should contain the number of characters to copy.
        //
        // Subsequently, when executing the first packet:
        // - p0 should be true if there are no more characters to read
        // - p1 should be true if there are no more characters to write
        // - r0 should point to the next address to write to
        // - r1 should point to the next address to read from
        // - r2 should contain the number of characters left to *read*, which will
        //      be one less than the number of characters left to write.
            "{ !p0? r3 <- *b(r1); !p1? *b(r0) <- r3; "
            "  !p0? r1 <- r1 + 1; !p1? r0 <- r0 + 1; }"
            // At this point, in the first iteration, we've done a single read
            // and no writes. r3 contains the byte we read.
            // r0 has not advanced, but r1 has.
            // r2 still contains the total number of characters to copy.
            "{ p0 <- r2 <=u 1; p1 <- r2 <=u 0; r2 <- r2 - 1; }"
            // If there are still characters to write, go back to the loop.
            "{ !p1? b -2; }"
            "{ b r31 + 1; r0 <- 0; }"
            );
}

extern "bare" fn user_copy_catch() {
    asm!("{ b r31 + 1; r0 <- ~0; }");
}
