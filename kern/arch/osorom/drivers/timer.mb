use arch::PERIPHERAL_START;
use consts::PAGE_SIZE;
use arch::drivers::ictl;

struct timer_t {
    count: u32,
    top: u32,
    control: u32,
}

// We use the first timer, which is peripheral instance 8.
const TIMER_IDX: u32 = 8;

static TIMER : *timer_t = (PERIPHERAL_START + PAGE_SIZE * TIMER_IDX) as *timer_t;
const TIMER_EN_BIT: u32 = 0;

fn timer_init() {
    // Disable timer if it's enabled for some reason.
    TIMER->control = 0;

    TIMER->count = 0;
    TIMER->top = 10000000;

    // Run the timer and enable its interrupt.
    TIMER->control = ((1) << TIMER_EN_BIT);
    ictl::enable_interrupt(TIMER_IDX, 0);
}

fn ack_interrupt() {
    ictl::ack_interrupt(TIMER_IDX, 0);
}
