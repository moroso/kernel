use utils::stdlib::strcmp;

// Really basic things for the built in fs.

// The start and end of the linked in fs image.
extern static fs_img_start: u8[0];
extern static fs_img_end: u8[0];
// Computed size
static fs_img_size: u32 = 0;

static header: *bsfs_header = null;
static file_table: *bsfs_entry = null;

const BSFS_FILENAME_LEN: u32 = 40;

// Header for the start of the bsfs.
struct bsfs_header {
    magic: u8[4], // Should be "MROF"
    num_files: u32
}

struct bsfs_entry {
    offset: u32,
    file_length: u32,
    filename: u8[BSFS_FILENAME_LEN]
}


fn fs_init() {
    fs_img_size = (&fs_img_end as u32) - (&fs_img_start as u32);
    header = &fs_img_start as *bsfs_header;
    file_table = (header+1) as *bsfs_entry;

    // Some debug spew!

    // Print the header and the size
    printf2_("FS info: %.4s %d\n", &fs_img_start as u32, fs_img_size);
    // Print the name of the first file and its size and offset
    printf3_("First file: %s %d %d\n",
             &file_table[0].filename as u32,
             file_table[0].file_length,
             file_table[0].offset);
}

fn fs_search(filename: *u8) -> *bsfs_entry {

    let i: u32;
    for (i = 0; i < header->num_files; i+=1) {
        if (strcmp(&file_table[i].filename[0], filename) == 0) {
            return &file_table[i];
        }
    }
    null
}

fn get_file_length(filename: *u8) -> i32 {
    let fs_entry: *bsfs_entry = fs_search(filename);
    if (fs_entry == null) {
        return -1;
    }
    fs_entry->file_length as i32
}

fn fs_read(filename: *u8, buffer: *u8, length: u32) -> i32 {
    let fs_entry: *bsfs_entry = fs_search(filename);
    if (fs_entry == null) {
        return -1;
    }
    assert(length <= fs_entry->file_length);
    mos_memcpy(buffer, &fs_img_start[0] + fs_entry->offset, length);

    0
}

