use structures::tcb::gpregs;
use structures::VM::*;
use structures::schedule::*;

const MAX_FAULT_NUMS: u32 = 256;

const PAGE_FAULT: u32 = 14;
const TIMER_INTER: u32 = 32;
const SYSCALL: u32 = 0x80;

struct uregs {
    ds: u32,
    es: u32,

    gpregs: gpregs,

    pf_addr: u32,
    cause: u32,

    error_code: u32,
    eip: u32,
    cs: u32,
    eflags: u32,
    esp: u32,
    ss: u32,
}



static fault_table: (fn(*uregs) -> ())[MAX_FAULT_NUMS];

static ticks: u32 = 0;

extern fn idt_base() -> *u32;
extern fn entry_stubs();
const STUB_SIZE: u32 = 16;

fn entry_setup() {
    let b = idt_base();
    let addr = &entry_stubs as u32;

    let i: u32;
    for (i = 0; i < 256; i += 1) {
        b[i*2] = 0x00100000 | (addr & 0xFFFF);
        let dpl = 3;
        b[i*2+1] = (addr & 0xFFFF0000)
                  | 0x8e00 | (dpl << 13);

        addr += STUB_SIZE;
    }
}

fn register(idx: u32, handler: fn(*uregs) -> ()) {
    assert!(idx < MAX_FAULT_NUMS);
    assert!(fault_table[idx] as u32 == 0);
    fault_table[idx] = handler;
}

fn entry_init() {
    entry_setup();

    register(PAGE_FAULT, page_fault_handler);
    register(TIMER_INTER, timer_handler);
}

extern fn pic_acknowledge_any_master();


fn page_fault_handler(regs: *uregs) {
  let PD: *PD_t = &(get_tcb()->proc->PD);
  let log_addr: *u8 = get_cr2() as *u8;
  let frame_addr: **u8 = log_to_phys(log_addr, PD);

  // if page is COW page, copy info onto new frame and replace
  if (frame_addr != null && has_flags(*frame_addr, COW_BIT)) {
      printf0_("COW time\n");
      cow_copy(log_addr, PD);
  } else {
      printf1_("Page Fault on address 0x%x\n", log_addr as u32);
      assert!(false);
  }
}

fn timer_handler(regs: *uregs) {
    ticks += 1;
    pic_acknowledge_any_master();

    printf1_("%d ticks\n", ticks);
    if (is_preempt_enabled()) {
        scheduler_update(-1);
    } 
}

fn kernel_entry(regs: *uregs) {
    let f: fn(*uregs) -> () = fault_table[regs->cause];
    if f as u32 == 0 {
        printf2_("took a fault %u at 0x%08x\n", regs->cause, regs->eip);
        assert!(false);
    }

    f(regs);
}

extern fn leave_kernel(ureg: *uregs);
