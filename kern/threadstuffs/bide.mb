/* bide.mb: kernel-side implementation for the bide function
 *
 * Author: Amanda M. Watson
*/

use utils::list::*;
use utils::slab_alloc::*;
use locks::mutex::*;
use locks::cond::*;
use structures::tcb::*;
use structures::proc::*;
use structures::schedule::*;
use utils::user_mem::*;

const debug_bide: bool = false;

/* when a thread invokes bide, it returns an exit status from a child process,
 * if possible.  If a child has exited and its status has not yet been
 * collected, the thread immediately returns with the status at the value of
 * pointer.  Otherwise, if a child is still active, it blocks until the child
 * exits.  On success, bide returns the pid of the exited child.
 * If the thread has no children whose exit statuses could be collected,
 * bide returns immediatly with error.  */
fn bide(pointer: *i32) -> i32 {
    let tcb: *tcb = get_tcb();
    let proc: *proc = tcb->proc;
    assert!(proc != null && tcb != null);

    kmut_lock(&(proc->child_mut));

    // if there are no exit statuses available, try and wait to see
    // if a child might exit
    if (list_is_empty(&(proc->exit_status_list))) {

        // if we already have a waiting tcb for every potential
        // exit status, return with error
        assert!(proc->num_bide_waiters <= proc->child_count);
        if (proc->num_bide_waiters == proc->child_count) {
            kmut_unlock(&(proc->child_mut));
            if (debug_bide) {
                printf!("thread %d returning with error\n ", get_tcb()->tid);
            }

            return -1;
        }
        proc->num_bide_waiters+=1;
        if (debug_bide) {
            printf!("thread %d choosing to wait (%d vs %d)\n", get_tcb()->tid,
                    proc->num_bide_waiters, proc->child_count);
        }
        kcond_wait(&(proc->proc_cond), &(proc->child_mut));
    }

    let new_status: *exit_status_t =  list_head_entry!(&(proc->exit_status_list),
            exit_status_t, link);
    assert!(new_status != null);


    let status = new_status->status;
    if (copy_to_user(pointer as *u8, &status as *u8, sizeof(i32)) < 0) {
        proc->num_bide_waiters-=1;

        kmut_unlock(&(proc->child_mut));
        return -2;
    }

    list_del(&(new_status->link));
    let tid: u32 = new_status->tid;

    slub_free(new_status as *u32, sizeof(exit_status_t));

    proc->child_count-=1;
    proc->num_bide_waiters+=1;
    kmut_unlock(&(proc->child_mut));


    if (debug_bide) {
        printf!("thread %d retrieving a status\n", get_tcb()->tid);
    }

    tid as i32
}
