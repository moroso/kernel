/* abscond.mb: kernel-side implementation for the abscond function
 *
 * Author: Amanda M. Watson
*/

use consts::*;
use utils::list::*;
use utils::slab_alloc::*;
use utils::buddy_alloc::*;
use locks::mutex::*;
use locks::cond::*;
use structures::tcb::*;
use structures::proc::*;
use structures::tcb_dir::*;
use structures::proc_dir::*;
use structures::schedule::*;
use structures::VM::*;

/*
 * I wrote a kernel far too recently to want to try and use an interesting
 * solution
 */
static dead_tcb: *tcb = null;
static abscond_lock: kmut = KMUT_INIT!(abscond_lock);

fn abscond()  {

    let tcb: *tcb = get_tcb();
    let proc: *proc = tcb->proc;
    assert!(proc != null && tcb != null);

    assert!(tcb != null);
    tcb_dir_remove(tcb);
    // if we still have a parent

    // if we are the only thread in the process, free our pcb
    if (list_is_singleton(&(proc->peer_tcb_list))) {

        set_exit_status(proc, -1);
        let parent_proc: *proc = proc_lookup(proc->parent_pid);

        proc_destroy(proc);
        if (parent_proc != null) {
            kmut_lock(&(parent_proc->child_mut));
            // remove child from list
            list_del(&(proc->child_link));
            // add exit status to parent
            list_insert_head(&(proc->exit_status->link), &(parent_proc->exit_status_list));
            // wake up parent
            kcond_signal(&(parent_proc->proc_cond));
            kmut_unlock(&(parent_proc->child_mut)); // think about lock placement some, maybe

            proc_end_lookup(parent_proc);
        } else {
            // free exit status.  init doesn't get it
            slub_free(proc->exit_status as *u32, sizeof(exit_status_t));
        }
    }

    decrease_proc_ref(proc);
    proc = null;

    kmut_lock(&abscond_lock);

    if (dead_tcb != null) {
        decrease_ref(dead_tcb);
    }

    preempt_disable();
    dead_tcb = tcb;
    kmut_unlock(&abscond_lock);
    scheduler_update(STATE_DEAD as i32);
    printf1_("%d, abscond returned\n", get_tcb()->tid);
    assert!(false); // no return
}
