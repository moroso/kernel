/* repl.mb: contains kernel-side implementation of repl and thr_repl syscalls
 *
 *
 * Author: Amanda M. Watson
 * */

use consts::*;
use utils::list::*;
use locks::mutex::*;
use utils::slab_alloc::*;
use structures::tcb::*;
use structures::proc::*;
use structures::VM::*;
use structures::schedule::*;
use threadstuffs::abscond::*;
use structures::tcb_dir::tcb_dir_add;
use entry::{uregs, leave_kernel};
use structures::mailbox::*;

/* function executed by child thread to return to the code the parent was
 * executing.  Assumes child has already been added to the directory */
fn child_repl(regs_i: *u8) { 
    let regs = regs_i as *uregs;
    // on success, child returns 0
    regs->gpregs.eax = 0;
    leave_kernel(regs);
}

/* given the parent's registers, creates a child thread that passes the regs to
 * child_repl */
fn thr_repl(parent_regs: *uregs) -> *tcb {
    thr_create(child_repl, parent_regs as *u8, sizeof(uregs))
}

fn thr_repl_handler() -> i32 {
    let parent_ureg: *uregs = (get_tcb()->kstack_top as *uregs) - 1;
    let new_tcb = thr_repl(parent_ureg);
    if (new_tcb != null) {

        new_tcb->proc = get_tcb()->proc;
        new_tcb->pid = get_tcb()->pid;
        kmut_lock(&(get_tcb()->proc->proc_mut));
        list_insert_head(&new_tcb->proc_link, &(get_tcb()->proc->peer_tcb_list));
        kmut_unlock(&(get_tcb()->proc->proc_mut));


        tcb_dir_add(new_tcb);

        /* add new tcb to list of children */
        schedule(new_tcb, QUEUE_BACK);

        return new_tcb->tid as i32;
    } 
    -1
}

fn repl_handler() -> i32 {
    let parent_ureg: *uregs = (get_tcb()->kstack_top as *uregs) - 1;
    repl(parent_ureg)
}

// currently assumes processes only have one thread
fn repl(parent_regs: *uregs) -> i32 {

    let parent_proc = get_tcb()->proc;
    /* if we don't have only on thread in parent process, return with error */
    if (!list_is_singleton(&(parent_proc->peer_tcb_list))) {
        return -1;
    }

    let child_proc: *proc = slub_alloc(sizeof(proc)) as *proc;

    if (child_proc == null) {
        return -2;
    }

    let child_tcb: *tcb = thr_repl(parent_regs);
    if (child_tcb == null) {
        slub_free(child_proc as *u32, sizeof(proc));
        return -3;
    }

    if (proc_init(child_proc, child_tcb, parent_proc) == -1) {
        slub_free(child_proc as *u32, sizeof(proc));
        thr_abort(child_tcb);
        return -4;
    }
    child_proc->parent_pid = parent_proc->pid as i32;

    // copy over references to new PD
    let pd: u32;
    let pt: u32;
    kmut_lock(&parent_proc->PD.mut);
    for (pd = get_pd_entry(USER_MEM_START as *u8); pd <= get_pd_entry((INT_MAX -
                    PAGE_SIZE) as *u8); pd += 1) {
        if (parent_proc->PD.PT_entries[pd] == null) {
            child_proc->PD.PT_entries[pd] = null;
            continue;
        }

        for (pt = get_pt_entry(USER_MEM_START as *u8); pt <= get_pt_entry((INT_MAX -
                        PAGE_SIZE) as *u8); pt+=1) {

            let page = make_entry(pd, pt, 0) as *u8;
            if (reuse_frame(page, &(parent_proc->PD), &(child_proc->PD)) < 0) {
                kmut_unlock(&parent_proc->PD.mut);

                thr_abort(child_tcb);
                proc_destroy(child_proc);
                return -5;
            }
        }
    }
    kmut_unlock(&parent_proc->PD.mut);

    // add tcb to directory, now that repl can no longer fail
    tcb_dir_add(child_tcb);
    /* add new tcb to list of children */
    kmut_lock(&(parent_proc->child_mut));
    list_insert_head(&(child_proc->child_link), &(parent_proc->child_proc_list));
    parent_proc->child_count+=1;

    kmut_unlock(&(parent_proc->child_mut));

    schedule(child_tcb, QUEUE_BACK);

    child_tcb->tid as i32
}
