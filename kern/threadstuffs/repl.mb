/* repl.mb: contains kernel-side implementation of repl and thr_repl syscalls
 *
 *
 * Author: Amanda M. Watson
 * */


fn child_repl(parent_ucontext: *context) {
   // stick context somewhere
   // add to directory
   // return 0
   while(true) {
       printf1_("child %u\n", get_tcb()->tid);
       scheduler_update(-1);
   }

   // on success, child returns 0
   // the parent doesn't do this, but it manually pops
   // its args, or something. I have not yet thought this through
   parent_ucontext->gpregs.eax = 0;
   // then we switch back to the user context in some reasonable mode-switch way
}

fn thr_repl(parent_ucontext: *context) -> *tcb {
  // 0x24 = sizeof(context)
  let child_tcb = thr_create(((&child_repl) as *u8), (parent_ucontext as *u8), 0x24);
  child_tcb
}

fn repl(parent_ucontext: *context) -> i32 {
    let child_tcb: *tcb = thr_repl(parent_ucontext);
    if (child_tcb == null) {
        return -1;
    }

    /* create PCB, fill it with stuff */
    /* Take care of address space stuff */

    schedule(child_tcb, BACK);
    child_tcb->tid as i32
}
