/* repl.mb: contains kernel-side implementation of repl and thr_repl syscalls
 *
 *
 * Author: Amanda M. Watson
 * */

use consts::*;
use utils::list::*;
use locks::mutex::*;
use utils::slab_alloc::*;
use structures::tcb::*;
use structures::proc::*;
use structures::VM::*;
use structures::schedule::*;
use threadstuffs::abscond::*;
use structures::tcb_dir::tcb_dir_add;
use entry::{uregs, leave_kernel};


fn child_repl(regs_i: *u8) {
    preempt_enable();
    let regs = regs_i as *uregs;
    // stick context somewhere
    // add to directory
    // return 0


    // on success, child returns 0
    regs->gpregs.eax = 0;
    leave_kernel(regs);
}

fn thr_repl(parent_regs: *uregs) -> *tcb {
    let child_tcb = thr_create(child_repl, parent_regs as *u8, sizeof(uregs));
    // TODO add to directory for syscall
    child_tcb
}

fn repl_handler() -> i32 {
    let parent_ureg: *uregs = (get_tcb()->kstack_top as *uregs) - 1;
    repl(parent_ureg)
}

// currently assumes processes only have one thread
fn repl(parent_regs: *uregs) -> i32 {

    let parent_proc = get_tcb()->proc;

    /* if we don't have only on thread in parent process, return with error */
    if (!list_is_singleton(&(parent_proc->peer_tcb_list))) {
        return -1;
    }

    let child_proc: *proc = slub_alloc(sizeof(proc)) as *proc;

    if (child_proc == null) {
        return -1;
    }

    let child_tcb: *tcb = thr_repl(parent_regs);
    if (child_tcb == null) {
        slub_free(child_proc as *u32, sizeof(proc));
        return -1;
    }

    if (proc_init(child_proc, child_tcb) == -1) {
        slub_free(child_proc as *u32, sizeof(proc));
        thr_abort(child_tcb);
        return -1;
    }

    child_proc->parent_pid = parent_proc->pid as i32;

    let page: *u8;
    // copy over references to new PD
    for (page = USER_MEM_START as *u8; page <= (INT_MAX - PAGE_SIZE) as *u8; page += PAGE_SIZE) {
        if (reuse_frame(page, &(parent_proc->PD), &(child_proc->PD)) < 0) {

            // TODO free proc, PD (cleanup)
            return -1;
        }
    }

    // add tcb to directory, now that repl can no longer fail
    tcb_dir_add(child_tcb);
    /* add new tcb to list of children */
    kmut_lock(&(parent_proc->child_mut));
    list_insert_head(&(child_proc->child_link), &(parent_proc->child_proc_list));
    parent_proc->child_count+=1;
    kmut_unlock(&(parent_proc->child_mut));

    schedule(child_tcb, QUEUE_BACK);
    child_tcb->tid as i32
}
