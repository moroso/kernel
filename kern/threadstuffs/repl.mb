/* repl.mb: contains kernel-side implementation of repl and thr_repl syscalls
 *
 *
 * Author: Amanda M. Watson
 * */


fn child_repl(parent_ucontext: *context) {
   // stick context somewhere
   // add to directory
   // return 0 
   while(true) { 
       printf1_("child %u\n", get_tcb()->tid); 
       scheduler_update(-1); 
   }

   // on success, child returns 0
   // the parent doesn't do this, but it manually pops
   // its args, or something. I have not yet thought this through
   parent_ucontext->eax = 0; 
   // then we switch back to the user context in some reasonable mode-switch way
}

fn thr_repl(parent_ucontext: *context) -> *tcb {
  // 0x24 = sizeof(context)
  let child_tcb = thr_create(((&child_repl) as *u8), (parent_ucontext as *u8), 0x24);
  child_tcb
}

// currently assumes processes only have one thread 
fn repl(parent_ucontext: *context) -> i32 {
    
    let parent_proc = get_tcb()->proc;
    /* if we don't have only on thread in parent process, return with error */
    
    if (list_is_singleton(&(parent_proc->peer_tcb_list)) == 0) {
        return -1;
    }
   
    let child_proc: *proc = slub_alloc(sizeof(proc)) as *proc;
    if (child_proc == null) {
        return -1;
    } 

    let child_tcb: *tcb = thr_repl(parent_ucontext);
    if (child_tcb == null) {
        slub_free(child_proc as *u32, sizeof(proc));
        return -1;
    }

    proc_init(child_proc, child_tcb);

    /* add new tcb to list of children */
    list_insert_head(&(child_proc->child_link), &(parent_proc->child_proc_list)); 

    schedule(child_tcb, BACK);
    child_tcb->tid as i32
}


